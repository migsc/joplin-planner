"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Setting_1 = require("./models/Setting");
const Synchronizer_1 = require("./Synchronizer");
const locale_js_1 = require("./locale.js");
const BaseSyncTarget_1 = require("./BaseSyncTarget");
const SyncTargetJoplinServer_1 = require("./SyncTargetJoplinServer");
class SyncTargetJoplinCloud extends BaseSyncTarget_1.default {
    static id() {
        return 10;
    }
    static supportsConfigCheck() {
        return SyncTargetJoplinServer_1.default.supportsConfigCheck();
    }
    static targetName() {
        return 'joplinCloud';
    }
    static label() {
        return (0, locale_js_1._)('Joplin Cloud');
    }
    static description() {
        return (0, locale_js_1._)('Joplin\'s own sync service. Also gives access to Joplin-specific features such as publishing notes or collaborating on notebooks with others.');
    }
    static supportsSelfHosted() {
        return false;
    }
    static supportsRecursiveLinkedNotes() {
        // Not currently working:
        // https://github.com/laurent22/joplin/pull/6661
        // https://github.com/laurent22/joplin/pull/6600
        return false;
    }
    isAuthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    fileApi() {
        const _super = Object.create(null, {
            fileApi: { get: () => super.fileApi }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.fileApi.call(this);
        });
    }
    static checkConfig(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return SyncTargetJoplinServer_1.default.checkConfig(Object.assign({}, options), SyncTargetJoplinCloud.id());
        });
    }
    initFileApi() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, SyncTargetJoplinServer_1.initFileApi)(SyncTargetJoplinCloud.id(), this.logger(), {
                path: () => Setting_1.default.value('sync.10.path'),
                userContentPath: () => Setting_1.default.value('sync.10.userContentPath'),
                username: () => Setting_1.default.value('sync.10.username'),
                password: () => Setting_1.default.value('sync.10.password'),
            });
        });
    }
    initSynchronizer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Synchronizer_1.default(this.db(), yield this.fileApi(), Setting_1.default.value('appType'));
        });
    }
}
exports.default = SyncTargetJoplinCloud;
//# sourceMappingURL=SyncTargetJoplinCloud.js.map