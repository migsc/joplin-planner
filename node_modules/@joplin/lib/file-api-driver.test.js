"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_1 = require("./testing/test-utils");
describe('file-api-driver', function () {
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_1.switchClient)(1);
        yield (0, test_utils_1.fileApi)().clearRoot();
        done();
    }));
    afterAll(() => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.afterAllCleanUp)();
    }));
    it('should create a file', (() => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.fileApi)().put('test.txt', 'testing');
        const content = yield (0, test_utils_1.fileApi)().get('test.txt');
        expect(content).toBe('testing');
    })));
    it('should get a file info', (() => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.fileApi)().put('test1.txt', 'testing');
        yield (0, test_utils_1.fileApi)().mkdir('sub');
        yield (0, test_utils_1.fileApi)().put('sub/test2.txt', 'testing');
        // Note: Although the stat object includes an "isDir" property, this is
        // not actually used by the synchronizer so not required by any sync
        // target.
        {
            const stat = yield (0, test_utils_1.fileApi)().stat('test1.txt');
            expect(stat.path).toBe('test1.txt');
            expect(!!stat.updated_time).toBe(true);
            expect(stat.isDir).toBe(false);
        }
        {
            const stat = yield (0, test_utils_1.fileApi)().stat('sub/test2.txt');
            expect(stat.path).toBe('sub/test2.txt');
            expect(!!stat.updated_time).toBe(true);
            expect(stat.isDir).toBe(false);
        }
    })));
    it('should create a file in a subdirectory', (() => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.fileApi)().mkdir('subdir');
        yield (0, test_utils_1.fileApi)().put('subdir/test.txt', 'testing');
        const content = yield (0, test_utils_1.fileApi)().get('subdir/test.txt');
        expect(content).toBe('testing');
    })));
    it('should list files', (() => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.fileApi)().mkdir('subdir');
        yield (0, test_utils_1.fileApi)().put('subdir/test1.txt', 'testing1');
        yield (0, test_utils_1.fileApi)().put('subdir/test2.txt', 'testing2');
        const files = yield (0, test_utils_1.fileApi)().list('subdir');
        expect(files.items.length).toBe(2);
        expect(files.items.map((f) => f.path).sort()).toEqual(['test1.txt', 'test2.txt'].sort());
    })));
    it('should delete a file', (() => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.fileApi)().put('test1.txt', 'testing1');
        yield (0, test_utils_1.fileApi)().delete('test1.txt');
        const files = yield (0, test_utils_1.fileApi)().list('');
        expect(files.items.length).toBe(0);
    })));
});
//# sourceMappingURL=file-api-driver.test.js.map