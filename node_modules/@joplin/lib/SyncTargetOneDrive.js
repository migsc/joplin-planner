"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const onedrive_api_1 = require("./onedrive-api");
const locale_1 = require("./locale");
const Setting_1 = require("./models/Setting");
const Synchronizer_1 = require("./Synchronizer");
const BaseSyncTarget_1 = require("./BaseSyncTarget");
const { parameters } = require('./parameters.js');
const { FileApi } = require('./file-api.js');
const { FileApiDriverOneDrive } = require('./file-api-driver-onedrive.js');
class SyncTargetOneDrive extends BaseSyncTarget_1.default {
    constructor(db, options = null) {
        super(db, options);
        this.api_ = null;
    }
    static id() {
        return 3;
    }
    static targetName() {
        return 'onedrive';
    }
    static label() {
        return (0, locale_1._)('OneDrive');
    }
    static description() {
        return 'A file hosting service operated by Microsoft as part of its web version of Office.';
    }
    static supportsSelfHosted() {
        return false;
    }
    isAuthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            return !!this.api().auth();
        });
    }
    syncTargetId() {
        return SyncTargetOneDrive.id();
    }
    isTesting() {
        const p = parameters();
        return !!p.oneDriveTest;
    }
    oneDriveParameters() {
        const p = parameters();
        if (p.oneDriveTest)
            return p.oneDriveTest;
        return p.oneDrive;
    }
    authRouteName() {
        return 'OneDriveLogin';
    }
    api() {
        if (this.isTesting()) {
            return this.fileApi_.driver().api();
        }
        if (this.api_)
            return this.api_;
        const isPublic = Setting_1.default.value('appType') !== 'cli' && Setting_1.default.value('appType') !== 'desktop';
        this.api_ = new onedrive_api_1.default(this.oneDriveParameters().id, this.oneDriveParameters().secret, isPublic);
        this.api_.on('authRefreshed', (a) => {
            this.logger().info('Saving updated OneDrive auth.');
            Setting_1.default.setValue(`sync.${this.syncTargetId()}.auth`, a ? JSON.stringify(a) : null);
        });
        let auth = Setting_1.default.value(`sync.${this.syncTargetId()}.auth`);
        if (auth) {
            try {
                auth = JSON.parse(auth);
            }
            catch (error) {
                this.logger().warn('Could not parse OneDrive auth token');
                this.logger().warn(error);
                auth = null;
            }
            this.api_.setAuth(auth);
        }
        return this.api_;
    }
    initFileApi() {
        return __awaiter(this, void 0, void 0, function* () {
            let context = Setting_1.default.value(`sync.${this.syncTargetId()}.context`);
            context = context === '' ? null : JSON.parse(context);
            let accountProperties = context ? context.accountProperties : null;
            if (!accountProperties) {
                accountProperties = yield this.api_.execAccountPropertiesRequest();
                context ? context.accountProperties = accountProperties : context = { accountProperties: accountProperties };
                Setting_1.default.setValue(`sync.${this.syncTargetId()}.context`, JSON.stringify(context));
            }
            this.api_.setAccountProperties(accountProperties);
            const appDir = yield this.api().appDirectory();
            const fileApi = new FileApi(appDir, new FileApiDriverOneDrive(this.api()));
            fileApi.setSyncTargetId(this.syncTargetId());
            fileApi.setLogger(this.logger());
            return fileApi;
        });
    }
    initSynchronizer() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!(yield this.isAuthenticated()))
                    throw new Error('User is not authentified');
                return new Synchronizer_1.default(this.db(), yield this.fileApi(), Setting_1.default.value('appType'));
            }
            catch (error) {
                BaseSyncTarget_1.default.dispatch({ type: 'SYNC_REPORT_UPDATE', report: { errors: [error] } });
                throw error;
            }
        });
    }
}
exports.default = SyncTargetOneDrive;
//# sourceMappingURL=SyncTargetOneDrive.js.map