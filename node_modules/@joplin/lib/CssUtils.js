"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectCustomStyles = exports.loadCustomCss = void 0;
const fs = require("fs-extra");
const loadCustomCss = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    let cssString = '';
    if (yield fs.pathExists(filePath)) {
        try {
            cssString = yield fs.readFile(filePath, 'utf-8');
        }
        catch (error) {
            let msg = error.message ? error.message : '';
            msg = `Could not load custom css from ${filePath}\n${msg}`;
            error.message = msg;
            throw error;
        }
    }
    return cssString;
});
exports.loadCustomCss = loadCustomCss;
const injectCustomStyles = (elementId, cssFilePath) => __awaiter(void 0, void 0, void 0, function* () {
    const css = yield (0, exports.loadCustomCss)(cssFilePath);
    const styleTag = document.createElement('style');
    styleTag.setAttribute('id', elementId);
    styleTag.setAttribute('type', 'text/css');
    styleTag.appendChild(document.createTextNode(css));
    document.head.appendChild(styleTag);
});
exports.injectCustomStyles = injectCustomStyles;
//# sourceMappingURL=CssUtils.js.map