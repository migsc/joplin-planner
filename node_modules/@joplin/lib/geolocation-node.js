"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("./Logger");
const shim_1 = require("./shim");
const logger = Logger_1.default.create('geolocation-node');
const fetchJson = (url) => __awaiter(void 0, void 0, void 0, function* () {
    let r = yield shim_1.default.fetch(url);
    if (!r.ok)
        throw new Error(`Could not get geolocation: ${yield r.text()}`);
    r = yield r.json();
    return r;
});
const geoipServices = {
    ipwhois: () => __awaiter(void 0, void 0, void 0, function* () {
        const r = yield fetchJson('https://ipwho.is/');
        if (!('latitude' in r) || !('longitude' in r))
            throw new Error(`Invalid geolocation response: ${r ? JSON.stringify(r) : '<null>'}`);
        return {
            timestamp: Date.now(),
            coords: {
                longitude: r.longitude,
                altitude: 0,
                latitude: r.latitude,
            },
        };
    }),
    geoplugin: () => __awaiter(void 0, void 0, void 0, function* () {
        const r = yield fetchJson('http://www.geoplugin.net/json.gp');
        if (!('geoplugin_latitude' in r) || !('geoplugin_longitude' in r))
            throw new Error(`Invalid geolocation response: ${r ? JSON.stringify(r) : '<null>'}`);
        return {
            timestamp: Date.now(),
            coords: {
                longitude: Number(r.geoplugin_longitude),
                altitude: 0,
                latitude: Number(r.geoplugin_latitude),
            },
        };
    }),
};
class default_1 {
    static currentPosition(options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options)
                options = {};
            for (const [serviceName, handler] of Object.entries(geoipServices)) {
                try {
                    const response = yield handler();
                    return response;
                }
                catch (error) {
                    logger.warn(`Could not get geolocation from service "${serviceName}"`);
                    logger.warn(error);
                }
            }
            throw new Error('Could not get geolocation from any of the services');
        });
    }
}
exports.default = default_1;
//# sourceMappingURL=geolocation-node.js.map