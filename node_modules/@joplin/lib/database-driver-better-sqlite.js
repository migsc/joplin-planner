"use strict";
// This is a driver for better-sqlite3. It may be interesting to use it instead
// of node-sqlite because it breaks all the time when we try to compile any app.
// The performance improvement probably won't matter.
//
// The issue however is that better-sqlite3 uses the option SQLITE_DQS=0, which
// disallows using double quotes around strings, and that's what we're using
// everywhere. So the only way to make it work would be to do a custom
// compilation, as described there, and set SQLITE_DQS=1:
//
// https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/compilation.md
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database = require('better-sqlite3');
class DatabaseDriverBetterSqlite {
    constructor() {
        this.db_ = null;
    }
    open(options) {
        this.db_ = new Database(options.name);
    }
    sqliteErrorToJsError(error, sql = null, params = null) {
        console.error(error.toString(), ' ---- ', sql, params);
        const msg = [error.toString()];
        if (sql)
            msg.push(sql);
        if (params)
            msg.push(params);
        const output = new Error(msg.join(': '));
        if (error.code)
            output.code = error.code;
        return output;
    }
    selectOne(sql, params = null) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.db_.prepare(sql).get(params ? params : []);
        });
    }
    selectAll(sql, params = null) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.db_.prepare(sql).all(params ? params : []);
        });
    }
    exec(sql, params = null) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.db_.prepare(sql).run(params ? params : []);
        });
    }
    lastInsertId() {
        throw new Error('NOT IMPLEMENTED');
    }
}
exports.default = DatabaseDriverBetterSqlite;
//# sourceMappingURL=database-driver-better-sqlite.js.map