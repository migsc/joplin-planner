"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Setting_1 = require("../models/Setting");
const SyncTargetJoplinServer_1 = require("../SyncTargetJoplinServer");
class DebugService {
    constructor(db) {
        this.db_ = db;
    }
    get db() {
        return this.db_;
    }
    clearSyncState() {
        return __awaiter(this, void 0, void 0, function* () {
            const tableNames = [
                'item_changes',
                'deleted_items',
                'sync_items',
                'key_values',
            ];
            const queries = [];
            for (const n of tableNames) {
                queries.push(`DELETE FROM ${n}`);
                queries.push(`DELETE FROM sqlite_sequence WHERE name="${n}"`); // Reset autoincremented IDs
            }
            for (let i = 0; i < 20; i++) {
                queries.push(`DELETE FROM settings WHERE key="sync.${i}.context"`);
                queries.push(`DELETE FROM settings WHERE key="sync.${i}.auth"`);
            }
            yield this.db.transactionExecBatch(queries);
        });
    }
    setupJoplinServerUser(num) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = SyncTargetJoplinServer_1.default.id();
            Setting_1.default.setValue('sync.target', id);
            Setting_1.default.setValue(`sync.${id}.path`, 'http://localhost:22300');
            Setting_1.default.setValue(`sync.${id}.username`, `user${num}@example.com`);
            Setting_1.default.setValue(`sync.${id}.password`, '123456');
        });
    }
}
exports.default = DebugService;
//# sourceMappingURL=DebugService.js.map