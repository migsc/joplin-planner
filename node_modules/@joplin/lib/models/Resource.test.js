"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_1 = require("../testing/test-utils");
const Folder_1 = require("../models/Folder");
const Note_1 = require("../models/Note");
const Resource_1 = require("../models/Resource");
const shim_1 = require("../shim");
const testImagePath = `${test_utils_1.supportDir}/photo.jpg`;
describe('models/Resource', function () {
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_1.switchClient)(1);
        done();
    }));
    it('should have a "done" fetch_status when created locally', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'ma note', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, testImagePath);
        const resource1 = (yield Resource_1.default.all())[0];
        const ls = yield Resource_1.default.localState(resource1);
        expect(ls.fetch_status).toBe(Resource_1.default.FETCH_STATUS_DONE);
    })));
    it('should have a default local state', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'ma note', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, testImagePath);
        const resource1 = (yield Resource_1.default.all())[0];
        const ls = yield Resource_1.default.localState(resource1);
        expect(!ls.id).toBe(true);
        expect(ls.resource_id).toBe(resource1.id);
        expect(ls.fetch_status).toBe(Resource_1.default.FETCH_STATUS_DONE);
    })));
    it('should save and delete local state', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'ma note', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, testImagePath);
        const resource1 = (yield Resource_1.default.all())[0];
        yield Resource_1.default.setLocalState(resource1, { fetch_status: Resource_1.default.FETCH_STATUS_IDLE });
        let ls = yield Resource_1.default.localState(resource1);
        expect(!!ls.id).toBe(true);
        expect(ls.fetch_status).toBe(Resource_1.default.FETCH_STATUS_IDLE);
        yield Resource_1.default.delete(resource1.id);
        ls = yield Resource_1.default.localState(resource1);
        expect(!ls.id).toBe(true);
    })));
    it('should resize the resource if the image is below the required dimensions', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'ma note', parent_id: folder1.id });
        const previousMax = Resource_1.default.IMAGE_MAX_DIMENSION;
        Resource_1.default.IMAGE_MAX_DIMENSION = 5;
        yield shim_1.default.attachFileToNote(note1, testImagePath);
        Resource_1.default.IMAGE_MAX_DIMENSION = previousMax;
        const resource1 = (yield Resource_1.default.all())[0];
        const originalStat = yield shim_1.default.fsDriver().stat(testImagePath);
        const newStat = yield shim_1.default.fsDriver().stat(Resource_1.default.fullPath(resource1));
        expect(newStat.size < originalStat.size).toBe(true);
    })));
    it('should not resize the resource if the image is below the required dimensions', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'ma note', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, testImagePath);
        const resource1 = (yield Resource_1.default.all())[0];
        const originalStat = yield shim_1.default.fsDriver().stat(testImagePath);
        const newStat = yield shim_1.default.fsDriver().stat(Resource_1.default.fullPath(resource1));
        expect(originalStat.size).toBe(newStat.size);
    })));
    // it('should encrypt a shared resource using the correct encryption key', (async () => {
    // 	const folder1 = await Folder.save({ title: 'folder1' });
    // 	const note1 = await Note.save({ title: 'ma note', parent_id: folder1.id });
    // 	await shim.attachFileToNote(note1, testImagePath);
    // 	Resource.shareService_ = {
    // 		shareById: () => {
    // 			return {
    // 				master_key_id: '',
    // 			};
    // 		},
    // 	} as any;
    // 	try {
    // 	} finally {
    // 		Resource.shareService_ = null;
    // 	}
    // }));
});
//# sourceMappingURL=Resource.test.js.map