"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModel_1 = require("../BaseModel");
const database_1 = require("../database");
class ResourceLocalState extends BaseModel_1.default {
    static tableName() {
        return 'resource_local_states';
    }
    static modelType() {
        return BaseModel_1.default.TYPE_RESOURCE_LOCAL_STATE;
    }
    static byResourceId(resourceId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resourceId)
                throw new Error('Resource ID not provided'); // Sanity check
            const result = yield this.modelSelectOne('SELECT * FROM resource_local_states WHERE resource_id = ?', [resourceId]);
            if (!result) {
                const defaultRow = this.db().createDefaultRow(this.tableName());
                delete defaultRow.id;
                defaultRow.resource_id = resourceId;
                return defaultRow;
            }
            return result;
        });
    }
    static save(o) {
        return __awaiter(this, void 0, void 0, function* () {
            const queries = [{ sql: 'DELETE FROM resource_local_states WHERE resource_id = ?', params: [o.resource_id] }, database_1.default.insertQuery(this.tableName(), o)];
            return this.db().transactionExecBatch(queries);
        });
    }
    static batchDelete(ids, options = null) {
        options = options ? Object.assign({}, options) : {};
        options.idFieldName = 'resource_id';
        return super.batchDelete(ids, options);
    }
}
exports.default = ResourceLocalState;
//# sourceMappingURL=ResourceLocalState.js.map