"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../Logger");
const shim_1 = require("../../shim");
const Setting_1 = require("../Setting");
const logger = Logger_1.default.create('Settings');
class FileHandler {
    constructor(filePath) {
        this.valueJsonCache_ = null;
        this.filePath_ = filePath;
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.valueJsonCache_) {
                if (!(yield shim_1.default.fsDriver().exists(this.filePath_))) {
                    this.valueJsonCache_ = '{}';
                }
                else {
                    this.valueJsonCache_ = yield shim_1.default.fsDriver().readFile(this.filePath_, 'utf8');
                }
            }
            try {
                const values = JSON.parse(this.valueJsonCache_);
                delete values['$id'];
                delete values['$schema'];
                return values;
            }
            catch (error) {
                // Most likely the user entered invalid JSON - in this case we move
                // the broken file to a new name (otherwise it would be overwritten
                // by valid JSON and user will lose all their settings).
                logger.error(`Could not parse JSON file: ${this.filePath_}`, error);
                yield shim_1.default.fsDriver().move(this.filePath_, `${this.filePath_}-${Date.now()}-invalid.bak`);
                return {};
            }
        });
    }
    save(values) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = `${JSON.stringify(Object.assign({ '$schema': Setting_1.default.schemaUrl }, values), null, '\t')}\n`;
            if (json === this.valueJsonCache_)
                return;
            yield shim_1.default.fsDriver().writeFile(this.filePath_, json, 'utf8');
            this.valueJsonCache_ = json;
        });
    }
}
exports.default = FileHandler;
//# sourceMappingURL=FileHandler.js.map