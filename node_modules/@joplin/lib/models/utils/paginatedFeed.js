"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const paginationToSql_1 = require("./paginationToSql");
// Note: this method might return more fields than was requested as it will
// also return fields that are necessary for pagination.
function default_1(db, tableName, pagination, whereQuery = null, fields = null) {
    return __awaiter(this, void 0, void 0, function* () {
        fields = fields ? fields.slice() : ['id'];
        const where = whereQuery ? [whereQuery.sql] : [];
        const sqlParams = whereQuery && whereQuery.params ? whereQuery.params.slice() : [];
        if (!pagination.order.length)
            throw new Error('Pagination order must be provided');
        if (pagination.order.length > 1)
            throw new Error('Only one pagination order field can be provided');
        const paginationOrder = pagination.order[0].dir;
        if (!pagination.order.find((o) => o.by === 'id')) {
            pagination = Object.assign(Object.assign({}, pagination), { order: pagination.order.concat([{
                        by: 'id',
                        dir: paginationOrder,
                        caseInsensitive: false,
                    }]) });
        }
        const orderBySql = (0, paginationToSql_1.default)(pagination);
        const fieldsSql = fields.length ? db.escapeFields(fields) : '*';
        const offset = (pagination.page - 1) * pagination.limit;
        const sql = `
		SELECT ${fieldsSql} FROM \`${tableName}\`
		${where.length ? `WHERE ${where.join(' AND ')}` : ''}
		ORDER BY ${orderBySql}
		LIMIT ${pagination.limit}
		OFFSET ${offset}
	`;
        // console.info('SQL', sql, sqlParams);
        const rows = yield db.selectAll(sql, sqlParams);
        return {
            items: rows,
            has_more: rows.length >= pagination.limit,
        };
    });
}
exports.default = default_1;
//# sourceMappingURL=paginatedFeed.js.map