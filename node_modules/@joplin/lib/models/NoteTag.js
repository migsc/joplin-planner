"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseItem_1 = require("./BaseItem");
const BaseModel_1 = require("../BaseModel");
class NoteTag extends BaseItem_1.default {
    static tableName() {
        return 'note_tags';
    }
    static modelType() {
        return BaseModel_1.default.TYPE_NOTE_TAG;
    }
    static byNoteIds(noteIds) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!noteIds.length)
                return [];
            return this.modelSelectAll(`SELECT * FROM note_tags WHERE note_id IN ("${noteIds.join('","')}")`);
        });
    }
    static tagIdsByNoteId(noteId) {
        return __awaiter(this, void 0, void 0, function* () {
            const rows = yield this.db().selectAll('SELECT tag_id FROM note_tags WHERE note_id = ?', [noteId]);
            const output = [];
            for (let i = 0; i < rows.length; i++) {
                output.push(rows[i].tag_id);
            }
            return output;
        });
    }
}
exports.default = NoteTag;
//# sourceMappingURL=NoteTag.js.map