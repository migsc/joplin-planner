"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_1 = require("../testing/test-utils");
const SearchEngine_1 = require("../services/searchengine/SearchEngine");
const ResourceService_1 = require("../services/ResourceService");
const ItemChangeUtils_1 = require("../services/ItemChangeUtils");
const Note_1 = require("../models/Note");
const ItemChange_1 = require("../models/ItemChange");
let searchEngine = null;
describe('models/ItemChange', function () {
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_1.switchClient)(1);
        searchEngine = new SearchEngine_1.default();
        searchEngine.setDb((0, test_utils_1.db)());
        done();
    }));
    it('should delete old changes that have been processed', (() => __awaiter(this, void 0, void 0, function* () {
        yield Note_1.default.save({ title: 'abcd efgh' });
        yield ItemChange_1.default.waitForAllSaved();
        expect(yield ItemChange_1.default.lastChangeId()).toBe(1);
        const resourceService = new ResourceService_1.default();
        yield searchEngine.syncTables();
        // If we run this now, it should not delete any change because
        // the resource service has not yet processed the change
        yield ItemChangeUtils_1.default.deleteProcessedChanges(0);
        expect(yield ItemChange_1.default.lastChangeId()).toBe(1);
        yield resourceService.indexNoteResources();
        yield ItemChangeUtils_1.default.deleteProcessedChanges(0);
        expect(yield ItemChange_1.default.lastChangeId()).toBe(1);
        yield (0, test_utils_1.revisionService)().collectRevisions();
        // If we don't set a TTL it will default to 90 days so it won't delete
        // either.
        yield ItemChangeUtils_1.default.deleteProcessedChanges();
        expect(yield ItemChange_1.default.lastChangeId()).toBe(1);
        // All changes should be at least 4 ms old now
        yield (0, test_utils_1.msleep)(4);
        // Now it should delete all changes older than 3 ms
        yield ItemChangeUtils_1.default.deleteProcessedChanges(3);
        expect(yield ItemChange_1.default.lastChangeId()).toBe(0);
    })));
});
//# sourceMappingURL=ItemChange.test.js.map