"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModel_1 = require("../BaseModel");
const Note_1 = require("./Note");
class Alarm extends BaseModel_1.default {
    static tableName() {
        return 'alarms';
    }
    static modelType() {
        return BaseModel_1.default.TYPE_ALARM;
    }
    static byNoteId(noteId) {
        return this.modelSelectOne('SELECT * FROM alarms WHERE note_id = ?', [noteId]);
    }
    static deleteExpiredAlarms() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.db().exec('DELETE FROM alarms WHERE trigger_time <= ?', [Date.now()]);
        });
    }
    static alarmIdsWithoutNotes() {
        return __awaiter(this, void 0, void 0, function* () {
            // https://stackoverflow.com/a/4967229/561309
            const alarms = yield this.db().selectAll('SELECT alarms.id FROM alarms LEFT JOIN notes ON alarms.note_id = notes.id WHERE notes.id IS NULL');
            return alarms.map((a) => {
                return a.id;
            });
        });
    }
    static makeNotification(alarm, note = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!note) {
                note = yield Note_1.default.load(alarm.note_id);
            }
            else if (!note.todo_due) {
                this.logger().warn('Trying to create notification for note with todo_due property - reloading note object in case we are dealing with a partial note');
                note = yield Note_1.default.load(alarm.note_id);
                this.logger().warn('Reloaded note:', note);
            }
            const output = {
                id: alarm.id,
                noteId: alarm.note_id,
                date: new Date(note.todo_due),
                title: note.title.substr(0, 128),
            };
            if (note.body)
                output.body = note.body.substr(0, 512);
            return output;
        });
    }
    static allDue() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.modelSelectAll('SELECT * FROM alarms WHERE trigger_time >= ?', [Date.now()]);
        });
    }
}
exports.default = Alarm;
//# sourceMappingURL=Alarm.js.map