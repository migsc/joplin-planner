"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_1 = require("../testing/test-utils");
const MasterKey_1 = require("./MasterKey");
describe('models/MasterKey', function () {
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_1.switchClient)(1);
        done();
    }));
    it('should return the latest master key', (() => __awaiter(this, void 0, void 0, function* () {
        expect(yield MasterKey_1.default.latest()).toBeFalsy();
        let mk1 = yield (0, test_utils_1.encryptionService)().generateMasterKey('111111');
        mk1 = yield MasterKey_1.default.save(mk1);
        expect((yield MasterKey_1.default.latest()).id).toBe(mk1.id);
        yield (0, test_utils_1.msleep)(1);
        let mk2 = yield (0, test_utils_1.encryptionService)().generateMasterKey('111111');
        mk2 = yield MasterKey_1.default.save(mk2);
        expect((yield MasterKey_1.default.latest()).id).toBe(mk2.id);
        yield (0, test_utils_1.msleep)(1);
        mk1 = yield MasterKey_1.default.save(mk1);
        expect((yield MasterKey_1.default.latest()).id).toBe(mk1.id);
    })));
});
//# sourceMappingURL=MasterKey.test.js.map