"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_driver_node_1 = require("./fs-driver-node");
const shim_1 = require("./shim");
const test_utils_1 = require("./testing/test-utils");
// On Windows, path.resolve is going to convert a path such as
// /tmp/file.txt to c:\tmp\file.txt
function platformPath(path) {
    if (shim_1.default.isWindows()) {
        return `c:${path.replace(/\//g, '\\')}`;
    }
    else {
        return path;
    }
}
describe('fsDriver', function () {
    it('should resolveRelativePathWithinDir', () => __awaiter(this, void 0, void 0, function* () {
        const fsDriver = new fs_driver_node_1.default();
        expect(fsDriver.resolveRelativePathWithinDir('/test/temp', './my/file.txt').toLowerCase()).toBe(platformPath('/test/temp/my/file.txt'));
        expect(fsDriver.resolveRelativePathWithinDir('/', './test').toLowerCase()).toBe(platformPath('/test'));
        expect(fsDriver.resolveRelativePathWithinDir('/test', 'myfile.txt').toLowerCase()).toBe(platformPath('/test/myfile.txt'));
        expect(fsDriver.resolveRelativePathWithinDir('/test/temp', './mydir/../test.txt').toLowerCase()).toBe(platformPath('/test/temp/test.txt'));
        yield (0, test_utils_1.expectThrow)(() => fsDriver.resolveRelativePathWithinDir('/test/temp', '../myfile.txt'));
        yield (0, test_utils_1.expectThrow)(() => fsDriver.resolveRelativePathWithinDir('/test/temp', './mydir/../../test.txt'));
        yield (0, test_utils_1.expectThrow)(() => fsDriver.resolveRelativePathWithinDir('/test/temp', '/var/local/no.txt'));
    }));
});
//# sourceMappingURL=fsDriver.test.js.map