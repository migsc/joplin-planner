"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const time_1 = require("./time");
const fs = require('fs-extra');
const file_api_1 = require("./file-api");
class FileApiDriverMemory {
    constructor() {
        this.items_ = [];
        this.deletedItems_ = [];
    }
    encodeContent_(content) {
        if (content instanceof Buffer) {
            return content.toString('base64');
        }
        else {
            return Buffer.from(content).toString('base64');
        }
    }
    get supportsMultiPut() {
        return true;
    }
    get supportsAccurateTimestamp() {
        return true;
    }
    decodeContent_(content) {
        return Buffer.from(content, 'base64').toString('utf-8');
    }
    itemIndexByPath(path) {
        for (let i = 0; i < this.items_.length; i++) {
            if (this.items_[i].path === path)
                return i;
        }
        return -1;
    }
    itemByPath(path) {
        const index = this.itemIndexByPath(path);
        return index < 0 ? null : this.items_[index];
    }
    newItem(path, isDir = false) {
        const now = time_1.default.unixMs();
        return {
            path: path,
            isDir: isDir,
            updated_time: now,
            // created_time: now, // In milliseconds!!
            content: '',
        };
    }
    stat(path) {
        const item = this.itemByPath(path);
        return Promise.resolve(item ? Object.assign({}, item) : null);
    }
    setTimestamp(path, timestampMs) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = this.itemByPath(path);
            if (!item)
                return Promise.reject(new Error(`File not found: ${path}`));
            item.updated_time = timestampMs;
        });
    }
    list(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = [];
            for (let i = 0; i < this.items_.length; i++) {
                const item = this.items_[i];
                if (item.path === path)
                    continue;
                if (item.path.indexOf(`${path}/`) === 0) {
                    const s = item.path.substr(path.length + 1);
                    if (s.split('/').length === 1) {
                        const it = Object.assign({}, item);
                        it.path = it.path.substr(path.length + 1);
                        output.push(it);
                    }
                }
            }
            return Promise.resolve({
                items: output,
                hasMore: false,
                context: null,
            });
        });
    }
    get(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = this.itemByPath(path);
            if (!item)
                return Promise.resolve(null);
            if (item.isDir)
                return Promise.reject(new Error(`${path} is a directory, not a file`));
            let output = null;
            if (options.target === 'file') {
                yield fs.writeFile(options.path, Buffer.from(item.content, 'base64'));
            }
            else {
                const content = this.decodeContent_(item.content);
                output = Promise.resolve(content);
            }
            return output;
        });
    }
    mkdir(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = this.itemIndexByPath(path);
            if (index >= 0)
                return;
            this.items_.push(this.newItem(path, true));
        });
    }
    put(path, content, options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options)
                options = {};
            if (options.source === 'file')
                content = yield fs.readFile(options.path);
            const index = this.itemIndexByPath(path);
            if (index < 0) {
                const item = this.newItem(path, false);
                item.content = this.encodeContent_(content);
                this.items_.push(item);
                return item;
            }
            else {
                this.items_[index].content = this.encodeContent_(content);
                this.items_[index].updated_time = time_1.default.unixMs();
                return this.items_[index];
            }
        });
    }
    multiPut(items, options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = {
                items: {},
            };
            for (const item of items) {
                try {
                    const processedItem = yield this.put(`/root/${item.name}`, item.body, options);
                    output.items[item.name] = {
                        item: processedItem,
                        error: null,
                    };
                }
                catch (error) {
                    output.items[item.name] = {
                        item: null,
                        error: error,
                    };
                }
            }
            return output;
        });
    }
    delete(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = this.itemIndexByPath(path);
            if (index >= 0) {
                const item = Object.assign({}, this.items_[index]);
                item.isDeleted = true;
                item.updated_time = time_1.default.unixMs();
                this.deletedItems_.push(item);
                this.items_.splice(index, 1);
            }
        });
    }
    move(oldPath, newPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const sourceItem = this.itemByPath(oldPath);
            if (!sourceItem)
                return Promise.reject(new Error(`Path not found: ${oldPath}`));
            yield this.delete(newPath); // Overwrite if newPath already exists
            sourceItem.path = newPath;
        });
    }
    format() {
        return __awaiter(this, void 0, void 0, function* () {
            this.items_ = [];
        });
    }
    delta(path, options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const getStatFn = (path) => __awaiter(this, void 0, void 0, function* () {
                const output = this.items_.slice();
                for (let i = 0; i < output.length; i++) {
                    const item = Object.assign({}, output[i]);
                    item.path = item.path.substr(path.length + 1);
                    output[i] = item;
                }
                return output;
            });
            const output = yield (0, file_api_1.basicDelta)(path, getStatFn, options);
            return output;
        });
    }
    clearRoot() {
        return __awaiter(this, void 0, void 0, function* () {
            this.items_ = [];
        });
    }
}
exports.default = FileApiDriverMemory;
//# sourceMappingURL=file-api-driver-memory.js.map