"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPlans = exports.createFeatureTableMd = exports.getFeatureEnabled = exports.getFeatureLabel = exports.getFeaturesByPlan = exports.getFeatureById = exports.getAllFeatureIds = exports.getFeatureLabelsByPlan = exports.getFeatureIdsByPlan = exports.findPrice = exports.loadStripeConfig = exports.PriceCurrency = exports.PricePeriod = exports.PlanName = void 0;
const fs = require("fs-extra");
const markdownUtils_1 = require("../markdownUtils");
var PlanName;
(function (PlanName) {
    PlanName["Basic"] = "basic";
    PlanName["Pro"] = "pro";
    PlanName["Teams"] = "teams";
})(PlanName = exports.PlanName || (exports.PlanName = {}));
var PricePeriod;
(function (PricePeriod) {
    PricePeriod["Monthly"] = "monthly";
    PricePeriod["Yearly"] = "yearly";
})(PricePeriod = exports.PricePeriod || (exports.PricePeriod = {}));
var PriceCurrency;
(function (PriceCurrency) {
    PriceCurrency["EUR"] = "EUR";
    PriceCurrency["GBP"] = "GBP";
    PriceCurrency["USD"] = "USD";
})(PriceCurrency = exports.PriceCurrency || (exports.PriceCurrency = {}));
function formatPrice(amount, currency) {
    amount = typeof amount === 'number' ? (Math.ceil(amount * 100) / 100).toFixed(2) : amount;
    if (currency === PriceCurrency.EUR)
        return `${amount}€`;
    if (currency === PriceCurrency.GBP)
        return `£${amount}`;
    if (currency === PriceCurrency.USD)
        return `$${amount}`;
    throw new Error(`Unsupported currency: ${currency}`);
}
function loadStripeConfig(env, filePath) {
    const config = JSON.parse(fs.readFileSync(filePath, 'utf8'))[env];
    if (!config)
        throw new Error(`Invalid env: ${env}`);
    config.prices = config.prices.map(p => {
        return Object.assign(Object.assign({}, p), { formattedAmount: formatPrice(p.amount, p.currency), formattedMonthlyAmount: p.period === PricePeriod.Monthly ? formatPrice(p.amount, p.currency) : formatPrice(Number(p.amount) / 12, p.currency) });
    });
    return config;
}
exports.loadStripeConfig = loadStripeConfig;
function findPrice(prices, query) {
    let output = null;
    if (query.accountType && query.period) {
        output = prices.filter(p => p.accountType === query.accountType).find(p => p.period === query.period);
    }
    else if (query.priceId) {
        output = prices.find(p => p.id === query.priceId);
    }
    else {
        throw new Error(`Invalid query: ${JSON.stringify(query)}`);
    }
    if (!output)
        throw new Error(`Not found: ${JSON.stringify(query)}`);
    return output;
}
exports.findPrice = findPrice;
const features = {
    maxItemSize: {
        title: 'Max note or attachment size',
        basic: true,
        pro: true,
        teams: true,
        basicInfo: '10 MB per note or attachment',
        proInfo: '200 MB per note or attachment',
        teamsInfo: '200 MB per note or attachment',
        basicInfoShort: '10 MB',
        proInfoShort: '200 MB',
        teamsInfoShort: '200 MB',
    },
    maxStorage: {
        title: 'Storage space',
        basic: true,
        pro: true,
        teams: true,
        basicInfo: '1 GB storage space',
        proInfo: '10 GB storage space',
        teamsInfo: '10 GB storage space',
        basicInfoShort: '1 GB',
        proInfoShort: '10 GB',
        teamsInfoShort: '10 GB',
    },
    publishNote: {
        title: 'Publish notes to the internet',
        basic: true,
        pro: true,
        teams: true,
    },
    sync: {
        title: 'Sync as many devices as you want',
        basic: true,
        pro: true,
        teams: true,
    },
    clipper: {
        title: 'Web Clipper',
        basic: true,
        pro: true,
        teams: true,
    },
    collaborate: {
        title: 'Share and collaborate on a notebook',
        basic: false,
        pro: true,
        teams: true,
    },
    multiUsers: {
        title: 'Manage multiple users',
        basic: false,
        pro: false,
        teams: true,
    },
    consolidatedBilling: {
        title: 'Consolidated billing',
        basic: false,
        pro: false,
        teams: true,
    },
    sharingAccessControl: {
        title: 'Sharing access control',
        basic: false,
        pro: false,
        teams: true,
    },
    prioritySupport: {
        title: 'Priority support',
        basic: false,
        pro: false,
        teams: true,
    },
};
const getFeatureIdsByPlan = (planName, featureOn) => {
    const output = [];
    for (const [k, v] of Object.entries(features)) {
        if (v[planName] === featureOn) {
            output.push(k);
        }
    }
    return output;
};
exports.getFeatureIdsByPlan = getFeatureIdsByPlan;
const getFeatureLabelsByPlan = (planName, featureOn) => {
    const output = [];
    for (const [featureId, v] of Object.entries(features)) {
        if (v[planName] === featureOn) {
            output.push((0, exports.getFeatureLabel)(planName, featureId));
        }
    }
    return output;
};
exports.getFeatureLabelsByPlan = getFeatureLabelsByPlan;
const getAllFeatureIds = () => {
    return Object.keys(features);
};
exports.getAllFeatureIds = getAllFeatureIds;
const getFeatureById = (featureId) => {
    return features[featureId];
};
exports.getFeatureById = getFeatureById;
const getFeaturesByPlan = (planName, featureOn) => {
    const output = [];
    for (const [, v] of Object.entries(features)) {
        if (v[planName] === featureOn) {
            output.push(v);
        }
    }
    return output;
};
exports.getFeaturesByPlan = getFeaturesByPlan;
const getFeatureLabel = (planName, featureId) => {
    const feature = features[featureId];
    const k = `${planName}Info`;
    if (feature[k])
        return feature[k];
    return feature.title;
};
exports.getFeatureLabel = getFeatureLabel;
const getFeatureEnabled = (planName, featureId) => {
    const feature = features[featureId];
    return feature[planName];
};
exports.getFeatureEnabled = getFeatureEnabled;
const createFeatureTableMd = () => {
    const headers = [
        {
            name: 'featureLabel',
            label: 'Feature',
        },
        {
            name: 'basic',
            label: 'Basic',
        },
        {
            name: 'pro',
            label: 'Pro',
        },
        {
            name: 'teams',
            label: 'Teams',
        },
    ];
    const rows = [];
    const getCellInfo = (planName, feature) => {
        if (!feature[planName])
            return '-';
        const infoShort = feature[`${planName}InfoShort`];
        if (infoShort)
            return infoShort;
        return '✔️';
    };
    for (const [, feature] of Object.entries(features)) {
        const row = {
            featureLabel: feature.title,
            basic: getCellInfo(PlanName.Basic, feature),
            pro: getCellInfo(PlanName.Pro, feature),
            teams: getCellInfo(PlanName.Teams, feature),
        };
        rows.push(row);
    }
    return markdownUtils_1.default.createMarkdownTable(headers, rows);
};
exports.createFeatureTableMd = createFeatureTableMd;
function getPlans(stripeConfig) {
    return {
        basic: {
            name: 'basic',
            title: 'Basic',
            priceMonthly: findPrice(stripeConfig.prices, {
                accountType: 1,
                period: PricePeriod.Monthly,
            }),
            priceYearly: findPrice(stripeConfig.prices, {
                accountType: 1,
                period: PricePeriod.Yearly,
            }),
            featured: false,
            iconName: 'basic-icon',
            featuresOn: (0, exports.getFeatureIdsByPlan)(PlanName.Basic, true),
            featuresOff: (0, exports.getFeatureIdsByPlan)(PlanName.Basic, false),
            featureLabelsOn: (0, exports.getFeatureLabelsByPlan)(PlanName.Basic, true),
            featureLabelsOff: (0, exports.getFeatureLabelsByPlan)(PlanName.Basic, false),
            cfaLabel: 'Try it now',
            cfaUrl: '',
            footnote: '',
        },
        pro: {
            name: 'pro',
            title: 'Pro',
            priceMonthly: findPrice(stripeConfig.prices, {
                accountType: 2,
                period: PricePeriod.Monthly,
            }),
            priceYearly: findPrice(stripeConfig.prices, {
                accountType: 2,
                period: PricePeriod.Yearly,
            }),
            featured: true,
            iconName: 'pro-icon',
            featuresOn: (0, exports.getFeatureIdsByPlan)(PlanName.Pro, true),
            featuresOff: (0, exports.getFeatureIdsByPlan)(PlanName.Pro, false),
            featureLabelsOn: (0, exports.getFeatureLabelsByPlan)(PlanName.Pro, true),
            featureLabelsOff: (0, exports.getFeatureLabelsByPlan)(PlanName.Pro, false),
            cfaLabel: 'Try it now',
            cfaUrl: '',
            footnote: '',
        },
        teams: {
            name: 'teams',
            title: 'Teams',
            priceMonthly: findPrice(stripeConfig.prices, {
                accountType: 3,
                period: PricePeriod.Monthly,
            }),
            priceYearly: findPrice(stripeConfig.prices, {
                accountType: 3,
                period: PricePeriod.Yearly,
            }),
            featured: false,
            iconName: 'business-icon',
            featuresOn: (0, exports.getFeatureIdsByPlan)(PlanName.Teams, true),
            featuresOff: (0, exports.getFeatureIdsByPlan)(PlanName.Teams, false),
            featureLabelsOn: (0, exports.getFeatureLabelsByPlan)(PlanName.Teams, true),
            featureLabelsOff: (0, exports.getFeatureLabelsByPlan)(PlanName.Teams, false),
            cfaLabel: 'Try it now',
            cfaUrl: '',
            footnote: 'Per user. Minimum of 2 users.',
        },
    };
}
exports.getPlans = getPlans;
//# sourceMappingURL=joplinCloud.js.map