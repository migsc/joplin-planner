"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeviceTimeDrift = exports.getNetworkTime = void 0;
const shim_1 = require("./shim");
const time_1 = require("./time");
const ntpClient_ = require('./vendor/ntp-client');
const server = {
    domain: 'pool.ntp.org',
    port: 123,
};
function ntpClient() {
    ntpClient_.dgram = shim_1.default.dgram();
    return ntpClient_;
}
function getNetworkTime() {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(function (resolve, reject) {
            ntpClient().getNetworkTime(server.domain, server.port, function (error, date) {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(date);
            });
        });
    });
}
exports.getNetworkTime = getNetworkTime;
function getDeviceTimeDrift() {
    return __awaiter(this, void 0, void 0, function* () {
        const maxTries = 3;
        let tryCount = 0;
        let ntpTime = null;
        while (true) {
            tryCount++;
            try {
                ntpTime = yield getNetworkTime();
                break;
            }
            catch (error) {
                if (tryCount >= maxTries) {
                    const newError = typeof error === 'string' ? new Error(error) : error;
                    newError.message = `Cannot retrieve the network time from ${server.domain}:${server.port}: ${newError.message}`;
                    throw newError;
                }
                else {
                    yield time_1.default.msleep(tryCount * 1000);
                }
            }
        }
        return ntpTime.getTime() - Date.now();
    });
}
exports.getDeviceTimeDrift = getDeviceTimeDrift;
// export default async function(): Promise<Date> {
// 	if (shouldSyncTime()) {
// 		const release = await fetchingTimeMutex.acquire();
// 		try {
// 			if (shouldSyncTime()) {
// 				const date = await networkTime();
// 				nextSyncTime = Date.now() + 60 * 1000;
// 				timeOffset = date.getTime() - Date.now();
// 			}
// 		} catch (error) {
// 			logger.warn('Could not get NTP time - falling back to device time:', error);
// 			// Fallback to device time since
// 			// most of the time it's actually correct
// 			nextSyncTime = Date.now() + 20 * 1000;
// 			timeOffset = 0;
// 		} finally {
// 			release();
// 		}
// 	}
// 	return new Date(Date.now() + timeOffset);
// }
//# sourceMappingURL=ntp.js.map