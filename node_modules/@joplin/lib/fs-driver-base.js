"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const time_1 = require("./time");
const Setting_1 = require("./models/Setting");
const path_utils_1 = require("./path-utils");
const md5 = require('md5');
class FsDriverBase {
    stat(_path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    readFile(_path, _encoding = 'utf8') {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    copy(_source, _dest) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    mkdir(_path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    unlink(_path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    move(_source, _dest) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    readFileChunk(_handle, _length, _encoding = 'base64') {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    open(_path, _mode) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    close(_handle) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    readDirStats(_path, _options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    exists(_path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    remove(_path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    isDirectory(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const stat = yield this.stat(path);
            return !stat ? false : stat.isDirectory();
        });
    }
    writeFile(_path, _content, _encoding = 'base64') {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    readDirStatsHandleRecursion_(basePath, stat, output, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.recursive && stat.isDirectory()) {
                const subPath = `${basePath}/${stat.path}`;
                const subStats = yield this.readDirStats(subPath, options);
                for (let j = 0; j < subStats.length; j++) {
                    const subStat = subStats[j];
                    subStat.path = `${stat.path}/${subStat.path}`;
                    output.push(subStat);
                }
            }
            return output;
        });
    }
    findUniqueFilename(name, reservedNames = null, markdownSafe = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (reservedNames === null) {
                reservedNames = [];
            }
            let counter = 1;
            const nameNoExt = (0, path_utils_1.filename)(name, true);
            let extension = (0, path_utils_1.fileExtension)(name);
            if (extension)
                extension = `.${extension}`;
            let nameToTry = nameNoExt + extension;
            while (true) {
                // Check if the filename does not exist in the filesystem and is not reserved
                const exists = (yield this.exists(nameToTry)) || reservedNames.includes(nameToTry);
                if (!exists)
                    return nameToTry;
                if (!markdownSafe) {
                    nameToTry = `${nameNoExt} (${counter})${extension}`;
                }
                else {
                    nameToTry = `${nameNoExt}-${counter}${extension}`;
                }
                counter++;
                if (counter >= 1000) {
                    nameToTry = `${nameNoExt} (${new Date().getTime()})${extension}`;
                    yield time_1.default.msleep(10);
                }
                if (counter >= 1100)
                    throw new Error('Cannot find unique filename');
            }
        });
    }
    removeAllThatStartWith(dirPath, filenameStart) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!filenameStart || !dirPath)
                throw new Error('dirPath and filenameStart cannot be empty');
            const stats = yield this.readDirStats(dirPath);
            for (const stat of stats) {
                if (stat.path.indexOf(filenameStart) === 0) {
                    yield this.remove(`${dirPath}/${stat.path}`);
                }
            }
        });
    }
    waitTillExists(path, timeout = 10000) {
        return __awaiter(this, void 0, void 0, function* () {
            const startTime = Date.now();
            while (true) {
                const e = yield this.exists(path);
                if (e)
                    return true;
                if (Date.now() - startTime > timeout)
                    return false;
                yield time_1.default.msleep(100);
            }
        });
    }
    // TODO: move out of here and make it part of joplin-renderer
    // or assign to option using .bind(fsDriver())
    cacheCssToFile(cssStrings) {
        return __awaiter(this, void 0, void 0, function* () {
            const cssString = Array.isArray(cssStrings) ? cssStrings.join('\n') : cssStrings;
            const cssFilePath = `${Setting_1.default.value('tempDir')}/${md5(escape(cssString))}.css`;
            if (!(yield this.exists(cssFilePath))) {
                yield this.writeFile(cssFilePath, cssString, 'utf8');
            }
            return {
                path: cssFilePath,
                mime: 'text/css',
            };
        });
    }
    tarExtract(_options) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
    tarCreate(_options, _filePaths) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented');
        });
    }
}
exports.default = FsDriverBase;
//# sourceMappingURL=fs-driver-base.js.map