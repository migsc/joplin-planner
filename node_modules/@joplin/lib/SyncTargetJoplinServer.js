"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initFileApi = exports.newFileApi = void 0;
const file_api_driver_joplinServer_1 = require("./file-api-driver-joplinServer");
const Setting_1 = require("./models/Setting");
const Synchronizer_1 = require("./Synchronizer");
const locale_js_1 = require("./locale.js");
const JoplinServerApi_1 = require("./JoplinServerApi");
const BaseSyncTarget_1 = require("./BaseSyncTarget");
const file_api_1 = require("./file-api");
const Logger_1 = require("./Logger");
const staticLogger = Logger_1.default.create('SyncTargetJoplinServer');
function newFileApi(id, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const apiOptions = {
            baseUrl: () => options.path(),
            userContentBaseUrl: () => options.userContentPath(),
            username: () => options.username(),
            password: () => options.password(),
            env: Setting_1.default.value('env'),
        };
        const api = new JoplinServerApi_1.default(apiOptions);
        const driver = new file_api_driver_joplinServer_1.default(api);
        const fileApi = new file_api_1.FileApi('', driver);
        fileApi.setSyncTargetId(id);
        yield fileApi.initialize();
        return fileApi;
    });
}
exports.newFileApi = newFileApi;
function initFileApi(syncTargetId, logger, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileApi = yield newFileApi(syncTargetId, options);
        fileApi.setLogger(logger);
        return fileApi;
    });
}
exports.initFileApi = initFileApi;
class SyncTargetJoplinServer extends BaseSyncTarget_1.default {
    static id() {
        return 9;
    }
    static supportsConfigCheck() {
        return true;
    }
    static targetName() {
        return 'joplinServer';
    }
    static description() {
        return 'Besides synchronisation and improved performances, Joplin Server also gives access to Joplin-specific sharing features.';
    }
    static label() {
        return `${(0, locale_js_1._)('Joplin Server')} (Beta)`;
    }
    isAuthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    fileApi() {
        const _super = Object.create(null, {
            fileApi: { get: () => super.fileApi }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.fileApi.call(this);
        });
    }
    static checkConfig(options, syncTargetId = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = {
                ok: false,
                errorMessage: '',
            };
            syncTargetId = syncTargetId === null ? SyncTargetJoplinServer.id() : syncTargetId;
            let fileApi = null;
            try {
                fileApi = yield newFileApi(syncTargetId, options);
                fileApi.requestRepeatCount_ = 0;
            }
            catch (error) {
                // If there's an error it's probably an application error, but we
                // can't proceed anyway, so exit.
                output.errorMessage = error.message;
                if (error.code)
                    output.errorMessage += ` (Code ${error.code})`;
                return output;
            }
            // First we try to fetch info.json. It may not be present if it's a new
            // sync target but otherwise, if it is, and it's valid, we know the
            // credentials are valid. We do this test first because it will work
            // even if account upload is disabled. And we need such account to
            // successfully login so that they can fix it by deleting extraneous
            // notes or resources.
            try {
                const r = yield fileApi.get('info.json');
                if (r) {
                    const parsed = JSON.parse(r);
                    if (parsed) {
                        output.ok = true;
                        return output;
                    }
                }
            }
            catch (error) {
                // Ignore because we'll use the next test to check for sure if it
                // works or not.
                staticLogger.warn('Could not fetch or parse info.json:', error);
            }
            // This is a more generic test, which writes a file and tries to read it
            // back.
            try {
                yield fileApi.put('testing.txt', 'testing');
                const result = yield fileApi.get('testing.txt');
                if (result !== 'testing')
                    throw new Error(`Could not access data on server "${options.path()}"`);
                yield fileApi.delete('testing.txt');
                output.ok = true;
            }
            catch (error) {
                output.errorMessage = error.message;
                if (error.code)
                    output.errorMessage += ` (Code ${error.code})`;
            }
            return output;
        });
    }
    initFileApi() {
        return __awaiter(this, void 0, void 0, function* () {
            return initFileApi(SyncTargetJoplinServer.id(), this.logger(), {
                path: () => Setting_1.default.value('sync.9.path'),
                userContentPath: () => Setting_1.default.value('sync.9.userContentPath'),
                username: () => Setting_1.default.value('sync.9.username'),
                password: () => Setting_1.default.value('sync.9.password'),
            });
        });
    }
    initSynchronizer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Synchronizer_1.default(this.db(), yield this.fileApi(), Setting_1.default.value('appType'));
        });
    }
}
exports.default = SyncTargetJoplinServer;
//# sourceMappingURL=SyncTargetJoplinServer.js.map