"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearLocalDataForRedownload = exports.clearLocalSyncStateForReupload = void 0;
const BaseItem_1 = require("../../models/BaseItem");
const Setting_1 = require("../../models/Setting");
const SyncTargetRegistry_1 = require("../../SyncTargetRegistry");
function clearSyncContext() {
    return __awaiter(this, void 0, void 0, function* () {
        const syncTargetIds = SyncTargetRegistry_1.default.allIds();
        for (const syncTargetId of syncTargetIds) {
            const key = `sync.${syncTargetId}.context`;
            if (Setting_1.default.keyExists(key)) {
                Setting_1.default.resetKey(key);
            }
        }
        yield Setting_1.default.saveAll();
    });
}
function clearLocalSyncStateForReupload(db) {
    return __awaiter(this, void 0, void 0, function* () {
        const queries = [
            { sql: 'DELETE FROM deleted_items' },
            { sql: 'DELETE FROM sync_items' },
        ];
        yield db.transactionExecBatch(queries);
        yield clearSyncContext();
    });
}
exports.clearLocalSyncStateForReupload = clearLocalSyncStateForReupload;
function clearLocalDataForRedownload(db) {
    return __awaiter(this, void 0, void 0, function* () {
        const queries = [
            { sql: 'DELETE FROM deleted_items' },
            { sql: 'DELETE FROM sync_items' },
            { sql: 'DELETE FROM item_changes' },
            { sql: 'DELETE FROM note_resources' },
        ];
        const syncItemTypes = BaseItem_1.default.syncItemTypes();
        for (const syncItemType of syncItemTypes) {
            const SyncItemClass = BaseItem_1.default.getClassByItemType(syncItemType);
            queries.push({ sql: `DELETE FROM ${db.escapeField(SyncItemClass.tableName())}` });
        }
        yield db.transactionExecBatch(queries);
        yield clearSyncContext();
    });
}
exports.clearLocalDataForRedownload = clearLocalDataForRedownload;
//# sourceMappingURL=tools.js.map