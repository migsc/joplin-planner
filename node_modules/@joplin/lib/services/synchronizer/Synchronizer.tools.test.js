"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_synchronizer_1 = require("../../testing/test-utils-synchronizer");
const test_utils_1 = require("../../testing/test-utils");
const Folder_1 = require("../../models/Folder");
const Note_1 = require("../../models/Note");
const tools_1 = require("../../services/synchronizer/tools");
describe('Synchronizer.tools', function () {
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(2);
        yield (0, test_utils_1.switchClient)(1);
        done();
    }));
    afterAll(() => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.afterAllCleanUp)();
    }));
    it('should clear local sync data, and re-upload everything to sync target', (() => __awaiter(this, void 0, void 0, function* () {
        yield Folder_1.default.save({ title: 'test' });
        yield (0, test_utils_1.synchronizerStart)();
        yield (0, test_utils_1.fileApi)().clearRoot();
        yield (0, tools_1.clearLocalSyncStateForReupload)((0, test_utils_1.db)());
        // Now that the local sync state has been cleared, it should re-upload
        // the items as if it was a new sync target. It should also not delete*
        // any local data.
        yield (0, test_utils_1.synchronizerStart)();
        expect((yield (0, test_utils_synchronizer_1.remoteNotesAndFolders)()).length).toBe(1);
        expect((yield Folder_1.default.all()).length).toBe(1);
    })));
    it('should clear local data, and re-downlaod everything from sync target', (() => __awaiter(this, void 0, void 0, function* () {
        const folder = yield Folder_1.default.save({ title: 'test' });
        yield Note_1.default.save({ title: 'test note', parent_id: folder.id });
        yield (0, test_utils_1.synchronizerStart)();
        yield (0, tools_1.clearLocalDataForRedownload)((0, test_utils_1.db)());
        expect((yield (0, test_utils_synchronizer_1.allNotesFolders)()).length).toBe(0);
        yield (0, test_utils_1.synchronizerStart)();
        expect((yield (0, test_utils_synchronizer_1.allNotesFolders)()).length).toBe(2);
        expect((yield (0, test_utils_synchronizer_1.remoteNotesAndFolders)()).length).toBe(2);
    })));
});
//# sourceMappingURL=Synchronizer.tools.test.js.map