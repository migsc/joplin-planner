"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Setting_1 = require("../../../models/Setting");
const tools_1 = require("../tools");
const registry_1 = require("../../../registry");
const Logger_1 = require("../../../Logger");
const logger = Logger_1.default.create('handleSyncStartupOperation');
function default_1() {
    return __awaiter(this, void 0, void 0, function* () {
        logger.info('Processing operation:', Setting_1.default.value('sync.startupOperation'));
        if (Setting_1.default.value('sync.startupOperation') === Setting_1.SyncStartupOperation.ClearLocalSyncState) {
            yield (0, tools_1.clearLocalSyncStateForReupload)(registry_1.reg.db());
            Setting_1.default.setValue('sync.startupOperation', Setting_1.SyncStartupOperation.None);
        }
        else if (Setting_1.default.value('sync.startupOperation') === Setting_1.SyncStartupOperation.ClearLocalData) {
            yield (0, tools_1.clearLocalDataForRedownload)(registry_1.reg.db());
            Setting_1.default.setValue('sync.startupOperation', Setting_1.SyncStartupOperation.None);
        }
        else if (Setting_1.default.value('sync.startupOperation') === Setting_1.SyncStartupOperation.None) {
            // Nothing
        }
        else {
            throw new Error(`Invalid sync.startupOperation value: ${Setting_1.default.value('sync.startupOperation')}`);
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=handleSyncStartupOperation.js.map