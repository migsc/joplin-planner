"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const shim_1 = require("../../../shim");
const MigrationHandler_1 = require("../MigrationHandler");
const Setting_1 = require("../../../models/Setting");
const registry_1 = require("../../../registry");
const LockHandler_1 = require("../LockHandler");
const { useEffect, useState } = shim_1.default.react();
function useSyncTargetUpgrade() {
    const [upgradeResult, setUpgradeResult] = useState({
        done: false,
        error: null,
    });
    function upgradeSyncTarget() {
        return __awaiter(this, void 0, void 0, function* () {
            registry_1.reg.logger().info('useSyncTargetUpgrade: Starting process...');
            let error = null;
            try {
                registry_1.reg.logger().info('useSyncTargetUpgrade: Acquire synchronizer...');
                const synchronizer = yield registry_1.reg.syncTarget().synchronizer();
                registry_1.reg.logger().info('useSyncTargetUpgrade: Create migration handler...');
                const migrationHandler = new MigrationHandler_1.default(synchronizer.api(), registry_1.reg.db(), synchronizer.lockHandler(), (0, LockHandler_1.appTypeToLockType)(Setting_1.default.value('appType')), Setting_1.default.value('clientId'));
                registry_1.reg.logger().info('useSyncTargetUpgrade: Start upgrade...');
                yield migrationHandler.upgrade();
            }
            catch (e) {
                error = e;
            }
            registry_1.reg.logger().info('useSyncTargetUpgrade: Error:', error);
            if (!error) {
                Setting_1.default.setValue('sync.upgradeState', Setting_1.default.SYNC_UPGRADE_STATE_IDLE);
                yield Setting_1.default.saveAll();
            }
            setUpgradeResult({
                done: true,
                error: error,
            });
        });
    }
    useEffect(function () {
        void upgradeSyncTarget();
    }, []);
    return upgradeResult;
}
exports.default = useSyncTargetUpgrade;
//# sourceMappingURL=useSyncTargetUpgrade.js.map