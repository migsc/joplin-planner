"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRootSharedFolder = exports.isSharedFolderOwner = exports.defaultState = exports.stateRootKey = exports.ShareUserStatus = void 0;
var ShareUserStatus;
(function (ShareUserStatus) {
    ShareUserStatus[ShareUserStatus["Waiting"] = 0] = "Waiting";
    ShareUserStatus[ShareUserStatus["Accepted"] = 1] = "Accepted";
    ShareUserStatus[ShareUserStatus["Rejected"] = 2] = "Rejected";
})(ShareUserStatus = exports.ShareUserStatus || (exports.ShareUserStatus = {}));
exports.stateRootKey = 'shareService';
exports.defaultState = {
    shares: [],
    shareUsers: {},
    shareInvitations: [],
    processingShareInvitationResponse: false,
};
function isSharedFolderOwner(state, folderId) {
    const userId = state.settings['sync.userId'];
    const share = state[exports.stateRootKey].shares.find(s => s.folder_id === folderId);
    if (!share)
        return false;
    return share.user.id === userId;
}
exports.isSharedFolderOwner = isSharedFolderOwner;
function isRootSharedFolder(folder) {
    return !!folder.share_id && !folder.parent_id;
}
exports.isRootSharedFolder = isRootSharedFolder;
const reducer = (draftRoot, action) => {
    if (action.type.indexOf('SHARE_') !== 0)
        return;
    const draft = draftRoot.shareService;
    try {
        switch (action.type) {
            case 'SHARE_SET':
                draft.shares = action.shares;
                break;
            case 'SHARE_USER_SET':
                draft.shareUsers[action.shareId] = action.shareUsers;
                break;
            case 'SHARE_INVITATION_SET':
                draft.shareInvitations = action.shareInvitations;
                break;
            case 'SHARE_INVITATION_RESPONSE_PROCESSING':
                draft.processingShareInvitationResponse = action.value;
                break;
        }
    }
    catch (error) {
        error.message = `In share reducer: ${error.message} Action: ${JSON.stringify(action)}`;
        throw error;
    }
};
exports.default = reducer;
//# sourceMappingURL=reducer.js.map