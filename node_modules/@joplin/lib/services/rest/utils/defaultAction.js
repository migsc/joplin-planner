"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Api_1 = require("../Api");
const defaultSaveOptions_1 = require("./defaultSaveOptions");
const errors_1 = require("./errors");
const paginatedResults_1 = require("./paginatedResults");
const readonlyProperties_1 = require("./readonlyProperties");
const requestFields_1 = require("./requestFields");
const BaseItem_1 = require("../../../models/BaseItem");
function default_1(modelType, request, id = null, link = null) {
    return __awaiter(this, void 0, void 0, function* () {
        if (link)
            throw new errors_1.ErrorNotFound(); // Default action doesn't support links at all for now
        const ModelClass = BaseItem_1.default.getClassByItemType(modelType);
        const getOneModel = (options = null) => __awaiter(this, void 0, void 0, function* () {
            const model = yield ModelClass.load(id, options || {});
            if (!model)
                throw new errors_1.ErrorNotFound();
            return model;
        });
        if (request.method === 'GET') {
            if (id) {
                return getOneModel({
                    fields: (0, requestFields_1.default)(request, modelType),
                });
            }
            else {
                return (0, paginatedResults_1.default)(modelType, request);
            }
        }
        if (request.method === 'PUT' && id) {
            const model = yield getOneModel();
            const newModel = Object.assign({}, model, request.bodyJson((0, readonlyProperties_1.default)('PUT')));
            return ModelClass.save(newModel, { userSideValidation: true });
        }
        if (request.method === 'DELETE' && id) {
            const model = yield getOneModel();
            yield ModelClass.delete(model.id);
            return;
        }
        if (request.method === Api_1.RequestMethod.POST) {
            const props = (0, readonlyProperties_1.default)('POST');
            const idIdx = props.indexOf('id');
            if (idIdx >= 0)
                props.splice(idIdx, 1);
            const model = request.bodyJson(props);
            return ModelClass.save(model, (0, defaultSaveOptions_1.default)('POST', model.id));
        }
        throw new errors_1.ErrorMethodNotAllowed();
    });
}
exports.default = default_1;
//# sourceMappingURL=defaultAction.js.map