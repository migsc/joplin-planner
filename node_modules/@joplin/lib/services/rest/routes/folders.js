"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const defaultAction_1 = require("../utils/defaultAction");
const paginatedResults_1 = require("../utils/paginatedResults");
const BaseModel_1 = require("../../../BaseModel");
const requestFields_1 = require("../utils/requestFields");
const Folder_1 = require("../../../models/Folder");
const { FoldersScreenUtils } = require('../../../folders-screen-utils.js');
const { ErrorNotFound } = require('../utils/errors');
function default_1(request, id = null, link = null) {
    return __awaiter(this, void 0, void 0, function* () {
        if (request.method === 'GET' && !id) {
            if (request.query.as_tree) {
                const folders = yield FoldersScreenUtils.allForDisplay({ fields: (0, requestFields_1.default)(request, BaseModel_1.default.TYPE_FOLDER) });
                const output = yield Folder_1.default.allAsTree(folders);
                return output;
            }
            else {
                return (0, defaultAction_1.default)(BaseModel_1.default.TYPE_FOLDER, request, id, link);
            }
        }
        if (request.method === 'GET' && id) {
            if (link && link === 'notes') {
                const folder = yield Folder_1.default.load(id);
                return (0, paginatedResults_1.default)(BaseModel_1.default.TYPE_NOTE, request, { sql: 'parent_id = ?', params: [folder.id] });
            }
            else if (link) {
                throw new ErrorNotFound();
            }
        }
        return (0, defaultAction_1.default)(BaseModel_1.default.TYPE_FOLDER, request, id, link);
    });
}
exports.default = default_1;
//# sourceMappingURL=folders.js.map