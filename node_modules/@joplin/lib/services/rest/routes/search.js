"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModel_1 = require("../../../BaseModel");
const defaultLoadOptions_1 = require("../utils/defaultLoadOptions");
const errors_1 = require("../utils/errors");
const requestFields_1 = require("../utils/requestFields");
const collectionToPaginatedResults_1 = require("../utils/collectionToPaginatedResults");
const BaseItem_1 = require("../../../models/BaseItem");
const SearchEngineUtils_1 = require("../../searchengine/SearchEngineUtils");
function default_1(request) {
    return __awaiter(this, void 0, void 0, function* () {
        if (request.method !== 'GET')
            throw new errors_1.ErrorMethodNotAllowed();
        const query = request.query.query;
        if (!query)
            throw new errors_1.ErrorBadRequest('Missing "query" parameter');
        const modelType = request.query.type ? BaseModel_1.default.modelNameToType(request.query.type) : BaseModel_1.default.TYPE_NOTE;
        let results = [];
        if (modelType !== BaseItem_1.default.TYPE_NOTE) {
            const ModelClass = BaseItem_1.default.getClassByItemType(modelType);
            const options = {};
            const fields = (0, requestFields_1.default)(request, modelType);
            if (fields.length)
                options.fields = fields;
            const sqlQueryPart = query.replace(/\*/g, '%');
            options.where = 'title LIKE ?';
            options.whereParams = [sqlQueryPart];
            options.caseInsensitive = true;
            results = yield ModelClass.all(options);
        }
        else {
            results = yield SearchEngineUtils_1.default.notesForQuery(query, false, (0, defaultLoadOptions_1.default)(request, BaseModel_1.ModelType.Note));
        }
        return (0, collectionToPaginatedResults_1.default)(modelType, results, request);
    });
}
exports.default = default_1;
//# sourceMappingURL=search.js.map