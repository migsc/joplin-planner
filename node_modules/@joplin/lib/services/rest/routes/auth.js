"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Api_1 = require("../Api");
const uuid_1 = require("../../../uuid");
let authToken = null;
function default_1(request, id = null, _link = null, context = null) {
    return __awaiter(this, void 0, void 0, function* () {
        if (request.method === 'POST') {
            authToken = uuid_1.default.createNano();
            context.dispatch({
                type: 'API_AUTH_TOKEN_SET',
                value: authToken,
            });
            return { auth_token: authToken };
        }
        if (request.method === 'GET') {
            if (id === 'check') {
                if ('auth_token' in request.query) {
                    if (context.authToken && request.query.auth_token === context.authToken.value) {
                        const output = {
                            status: context.authToken.status,
                        };
                        if (context.authToken.status === Api_1.AuthTokenStatus.Accepted) {
                            output.token = context.token;
                        }
                        return output;
                    }
                    else {
                        throw new Error(`Invalid auth token: ${request.query.auth_token}`);
                    }
                }
                if ('token' in request.query) {
                    const isValid = request.query.token === context.token;
                    if (isValid) {
                        context.dispatch({
                            type: 'API_AUTH_LOGIN',
                            value: true,
                        });
                    }
                    return { valid: isValid };
                }
            }
        }
        throw new Error('Invalid request');
    });
}
exports.default = default_1;
//# sourceMappingURL=auth.js.map