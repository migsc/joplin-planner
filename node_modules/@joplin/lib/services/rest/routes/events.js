"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModel_1 = require("../../../BaseModel");
const Api_1 = require("../Api");
const errors_1 = require("../utils/errors");
const ItemChange_1 = require("../../../models/ItemChange");
const requestFields_1 = require("../utils/requestFields");
function default_1(request, id = null, _link = null) {
    return __awaiter(this, void 0, void 0, function* () {
        if (request.method === Api_1.RequestMethod.GET) {
            const options = {
                limit: 100,
                fields: (0, requestFields_1.default)(request, BaseModel_1.ModelType.ItemChange, ['id', 'item_type', 'item_id', 'type', 'created_time']),
            };
            if (!id) {
                if (!('cursor' in request.query)) {
                    return {
                        items: [],
                        has_more: false,
                        cursor: (yield ItemChange_1.default.lastChangeId()).toString(),
                    };
                }
                else {
                    const cursor = Number(request.query.cursor);
                    if (isNaN(cursor))
                        throw new errors_1.ErrorBadRequest(`Invalid cursor: ${request.query.cursor}`);
                    const changes = yield ItemChange_1.default.changesSinceId(cursor, options);
                    return {
                        items: changes,
                        has_more: changes.length >= options.limit,
                        cursor: (changes.length ? changes[changes.length - 1].id : cursor).toString(),
                    };
                }
            }
            else {
                const change = yield ItemChange_1.default.load(id, { fields: options.fields });
                if (!change)
                    throw new errors_1.ErrorNotFound();
                return change;
            }
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=events.js.map