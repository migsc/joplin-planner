"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const defaultAction_1 = require("../utils/defaultAction");
const BaseModel_1 = require("../../../BaseModel");
const defaultLoadOptions_1 = require("../utils/defaultLoadOptions");
const Api_1 = require("../Api");
const collectionToPaginatedResults_1 = require("../utils/collectionToPaginatedResults");
const Note_1 = require("../../../models/Note");
const Tag_1 = require("../../../models/Tag");
const { ErrorBadRequest, ErrorNotFound } = require('../utils/errors');
function default_1(request, id = null, link = null) {
    return __awaiter(this, void 0, void 0, function* () {
        if (link === 'notes') {
            const tag = yield Tag_1.default.load(id);
            if (!tag)
                throw new ErrorNotFound();
            if (request.method === Api_1.RequestMethod.POST) {
                const note = request.bodyJson();
                if (!note || !note.id)
                    throw new ErrorBadRequest('Missing note ID');
                return yield Tag_1.default.addNote(tag.id, note.id);
            }
            if (request.method === 'DELETE') {
                const noteId = request.params.length ? request.params[0] : null;
                if (!noteId)
                    throw new ErrorBadRequest('Missing note ID');
                yield Tag_1.default.removeNote(tag.id, noteId);
                return;
            }
            if (request.method === 'GET') {
                // Ideally we should get all this in one SQL query but for now that will do
                const noteIds = yield Tag_1.default.noteIds(tag.id);
                const output = [];
                for (let i = 0; i < noteIds.length; i++) {
                    const n = yield Note_1.default.preview(noteIds[i], (0, defaultLoadOptions_1.default)(request, BaseModel_1.ModelType.Note));
                    if (!n)
                        continue;
                    output.push(n);
                }
                return (0, collectionToPaginatedResults_1.default)(BaseModel_1.ModelType.Note, output, request);
            }
        }
        return (0, defaultAction_1.default)(BaseModel_1.default.TYPE_TAG, request, id, link);
    });
}
exports.default = default_1;
//# sourceMappingURL=tags.js.map