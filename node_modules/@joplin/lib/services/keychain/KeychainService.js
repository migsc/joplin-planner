"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Setting_1 = require("../../models/Setting");
const BaseService_1 = require("../BaseService");
class KeychainService extends BaseService_1.default {
    constructor() {
        super(...arguments);
        this.enabled_ = true;
    }
    static instance() {
        if (!this.instance_)
            this.instance_ = new KeychainService();
        return this.instance_;
    }
    initialize(driver) {
        if (!driver.appId || !driver.clientId)
            throw new Error('appId and clientId must be set on the KeychainServiceDriver');
        this.driver = driver;
    }
    // This is to programatically disable the keychain service, whether keychain
    // is supported or not in the system (In other word, this be might "enabled"
    // but nothing will be saved to the keychain if there isn't one).
    get enabled() {
        if (!this.enabled_)
            return false;
        // Otherwise we assume it's enabled if "keychain.supported" is either -1
        // (undetermined) or 1 (working). We make it work for -1 too because the
        // setPassword() and password() functions need to work to test if the
        // keychain is supported (in detectIfKeychainSupported).
        return Setting_1.default.value('keychain.supported') !== 0;
    }
    set enabled(v) {
        this.enabled_ = v;
    }
    setPassword(name, password) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.enabled)
                return false;
            // Due to a bug in macOS, this may throw an exception "The user name or passphrase you entered is not correct."
            // The fix is to open Keychain Access.app. Right-click on the login keychain and try locking it and then unlocking it again.
            // https://github.com/atom/node-keytar/issues/76
            return this.driver.setPassword(name, password);
        });
    }
    password(name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.enabled)
                return null;
            return this.driver.password(name);
        });
    }
    deletePassword(name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.enabled)
                return;
            yield this.driver.deletePassword(name);
        });
    }
    detectIfKeychainSupported() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger().info('KeychainService: checking if keychain supported');
            if (Setting_1.default.value('keychain.supported') >= 0) {
                this.logger().info('KeychainService: check was already done - skipping. Supported:', Setting_1.default.value('keychain.supported'));
                return;
            }
            const passwordIsSet = yield this.setPassword('zz_testingkeychain', 'mytest');
            if (!passwordIsSet) {
                this.logger().info('KeychainService: could not set test password - keychain support will be disabled');
                Setting_1.default.setValue('keychain.supported', 0);
            }
            else {
                const result = yield this.password('zz_testingkeychain');
                yield this.deletePassword('zz_testingkeychain');
                this.logger().info('KeychainService: tried to set and get password. Result was:', result);
                Setting_1.default.setValue('keychain.supported', result === 'mytest' ? 1 : 0);
            }
        });
    }
}
exports.default = KeychainService;
//# sourceMappingURL=KeychainService.js.map