"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const NodeRSA = require("node-rsa");
const nodeRSAOptions = {
    // Must use pkcs1 otherwise any data encrypted with NodeRSA will crash the
    // app when decrypted by RN-RSA.
    // https://github.com/amitaymolko/react-native-rsa-native/issues/66#issuecomment-932768139
    encryptionScheme: 'pkcs1',
};
const rsa = {
    generateKeyPair: (keySize) => __awaiter(void 0, void 0, void 0, function* () {
        const keys = new NodeRSA();
        keys.setOptions(nodeRSAOptions);
        keys.generateKeyPair(keySize, 65537);
        // Sanity check
        if (!keys.isPrivate())
            throw new Error('No private key was generated');
        if (!keys.isPublic())
            throw new Error('No public key was generated');
        return keys;
    }),
    loadKeys: (publicKey, privateKey) => __awaiter(void 0, void 0, void 0, function* () {
        const keys = new NodeRSA();
        keys.setOptions(nodeRSAOptions);
        // Don't specify the import format, and let it auto-detect because
        // react-native-rsa might not create a key in the expected format.
        keys.importKey(publicKey);
        if (privateKey)
            keys.importKey(privateKey);
        return keys;
    }),
    encrypt: (plaintextUtf8, rsaKeyPair) => __awaiter(void 0, void 0, void 0, function* () {
        return rsaKeyPair.encrypt(plaintextUtf8, 'base64', 'utf8');
    }),
    decrypt: (ciphertextBase64, rsaKeyPair) => __awaiter(void 0, void 0, void 0, function* () {
        return rsaKeyPair.decrypt(ciphertextBase64, 'utf8');
    }),
    publicKey: (rsaKeyPair) => {
        return rsaKeyPair.exportKey('pkcs1-public-pem');
    },
    privateKey: (rsaKeyPair) => {
        return rsaKeyPair.exportKey('pkcs1-private-pem');
    },
};
exports.default = rsa;
//# sourceMappingURL=RSA.node.js.map