"use strict";
/* eslint @typescript-eslint/no-unused-vars: 0, no-unused-vars: ["error", { "argsIgnorePattern": ".*" }], */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Setting_1 = require("../../models/Setting");
class InteropService_Exporter_Base {
    constructor() {
        this.context_ = {};
        this.metadata_ = {};
    }
    // @ts-ignore
    init(destDir, options = {}) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    // @ts-ignore
    prepareForProcessingItemType(itemType, itemsToExport) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    // @ts-ignore
    processItem(itemType, item) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    // @ts-ignore
    processResource(resource, filePath) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    setMetadata(md) {
        this.metadata_ = md;
    }
    metadata() {
        return this.metadata_;
    }
    updateContext(context) {
        this.context_ = Object.assign({}, this.context_, context);
    }
    context() {
        return this.context_;
    }
    temporaryDirectory_(createIt) {
        return __awaiter(this, void 0, void 0, function* () {
            const md5 = require('md5');
            const tempDir = `${Setting_1.default.value('tempDir')}/${md5(Math.random() + Date.now())}`;
            if (createIt)
                yield require('fs-extra').mkdirp(tempDir);
            return tempDir;
        });
    }
}
exports.default = InteropService_Exporter_Base;
//# sourceMappingURL=InteropService_Exporter_Base.js.map