"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const locale_1 = require("../../locale");
const InteropService_Exporter_Base_1 = require("./InteropService_Exporter_Base");
const InteropService_Exporter_Raw_1 = require("./InteropService_Exporter_Raw");
const shim_1 = require("../../shim");
const fs = require('fs-extra');
class InteropService_Exporter_Jex extends InteropService_Exporter_Base_1.default {
    init(destPath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield shim_1.default.fsDriver().isDirectory(destPath))
                throw new Error(`Path is a directory: ${destPath}`);
            this.tempDir_ = yield this.temporaryDirectory_(false);
            this.destPath_ = destPath;
            this.rawExporter_ = new InteropService_Exporter_Raw_1.default();
            yield this.rawExporter_.init(this.tempDir_);
        });
    }
    processItem(itemType, item) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rawExporter_.processItem(itemType, item);
        });
    }
    processResource(resource, filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rawExporter_.processResource(resource, filePath);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const stats = yield shim_1.default.fsDriver().readDirStats(this.tempDir_, { recursive: true });
            const filePaths = stats.filter((a) => !a.isDirectory()).map((a) => a.path);
            if (!filePaths.length)
                throw new Error((0, locale_1._)('There is no data to export.'));
            yield shim_1.default.fsDriver().tarCreate({
                strict: true,
                portable: true,
                file: this.destPath_,
                cwd: this.tempDir_,
            }, filePaths);
            yield fs.remove(this.tempDir_);
        });
    }
}
exports.default = InteropService_Exporter_Jex;
//# sourceMappingURL=InteropService_Exporter_Jex.js.map