"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const InteropService_Importer_Base_1 = require("./InteropService_Importer_Base");
const Folder_1 = require("../../models/Folder");
const import_enex_1 = require("../../import-enex");
const { filename } = require('../../path-utils');
class InteropService_Importer_EnexToHtml extends InteropService_Importer_Base_1.default {
    exec(result) {
        return __awaiter(this, void 0, void 0, function* () {
            let folder = this.options_.destinationFolder;
            if (!folder) {
                const folderTitle = yield Folder_1.default.findUniqueItemTitle(filename(this.sourcePath_));
                folder = yield Folder_1.default.save({ title: folderTitle });
            }
            yield (0, import_enex_1.default)(folder.id, this.sourcePath_, Object.assign(Object.assign({}, this.options_), { outputFormat: 'html' }));
            return result;
        });
    }
}
exports.default = InteropService_Importer_EnexToHtml;
//# sourceMappingURL=InteropService_Importer_EnexToHtml.js.map