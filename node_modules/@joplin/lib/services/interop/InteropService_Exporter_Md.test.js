"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const test_utils_js_1 = require("../../testing/test-utils.js");
const InteropService_Exporter_Md_1 = require("../../services/interop/InteropService_Exporter_Md");
const BaseModel_1 = require("../../BaseModel");
const Folder_1 = require("../../models/Folder");
const Resource_1 = require("../../models/Resource");
const Note_1 = require("../../models/Note");
const shim_1 = require("../../shim");
const renderer_1 = require("@joplin/renderer");
const InteropService_js_1 = require("./InteropService.js");
const path_utils_js_1 = require("../../path-utils.js");
describe('interop/InteropService_Exporter_Md', function () {
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_js_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_js_1.switchClient)(1);
        yield fs.remove((0, test_utils_js_1.exportDir)());
        yield fs.mkdirp((0, test_utils_js_1.exportDir)());
        done();
    }));
    it('should create resources directory', (() => __awaiter(this, void 0, void 0, function* () {
        const service = new InteropService_Exporter_Md_1.default();
        yield service.init((0, test_utils_js_1.exportDir)());
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/_resources/`)).toBe(true);
    })));
    it('should create note paths and add them to context', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        let note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        const note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, `${test_utils_js_1.supportDir}/photo.jpg`);
        note1 = yield Note_1.default.load(note1.id);
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder1.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        queueExportItem(BaseModel_1.default.TYPE_RESOURCE, (yield Note_1.default.linkedResourceIds(note1.body))[0]);
        const folder2 = yield Folder_1.default.save({ title: 'folder2' });
        let note3 = yield Note_1.default.save({ title: 'note3', parent_id: folder2.id, markup_language: renderer_1.MarkupToHtml.MARKUP_LANGUAGE_HTML });
        yield shim_1.default.attachFileToNote(note3, `${test_utils_js_1.supportDir}/photo.jpg`);
        note3 = yield Note_1.default.load(note3.id);
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder2.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note3);
        queueExportItem(BaseModel_1.default.TYPE_RESOURCE, (yield Note_1.default.linkedResourceIds(note3.body))[0]);
        expect(!exporter.context() && !(exporter.context().notePaths || Object.keys(exporter.context().notePaths).length)).toBe(false);
        yield exporter.processItem(Folder_1.default.modelType(), folder1);
        yield exporter.processItem(Folder_1.default.modelType(), folder2);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        expect(Object.keys(exporter.context().notePaths).length).toBe(3);
        expect(exporter.context().notePaths[note1.id]).toBe('folder1/note1.md');
        expect(exporter.context().notePaths[note2.id]).toBe('folder1/note2.md');
        expect(exporter.context().notePaths[note3.id]).toBe('folder2/note3.html');
    })));
    it('should create resource paths and add them to context', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        let note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        const note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, `${test_utils_js_1.supportDir}/photo.jpg`);
        note1 = yield Note_1.default.load(note1.id);
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder1.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        queueExportItem(BaseModel_1.default.TYPE_RESOURCE, (yield Note_1.default.linkedResourceIds(note1.body))[0]);
        const resource1 = yield Resource_1.default.load(itemsToExport[3].itemOrId);
        const folder2 = yield Folder_1.default.save({ title: 'folder2' });
        let note3 = yield Note_1.default.save({ title: 'note3', parent_id: folder2.id });
        yield shim_1.default.attachFileToNote(note3, `${test_utils_js_1.supportDir}/photo.jpg`);
        note3 = yield Note_1.default.load(note3.id);
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder2.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note3);
        queueExportItem(BaseModel_1.default.TYPE_RESOURCE, (yield Note_1.default.linkedResourceIds(note3.body))[0]);
        const resource2 = yield Resource_1.default.load(itemsToExport[6].itemOrId);
        yield exporter.processItem(Folder_1.default.modelType(), folder1);
        yield exporter.processItem(Folder_1.default.modelType(), folder2);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        yield exporter.processResource(resource1, Resource_1.default.fullPath(resource1));
        yield exporter.processResource(resource2, Resource_1.default.fullPath(resource2));
        expect(!exporter.context() && !(exporter.context().destResourcePaths || Object.keys(exporter.context().destResourcePaths).length)).toBe(false);
        expect(Object.keys(exporter.context().destResourcePaths).length).toBe(2);
        expect(exporter.context().destResourcePaths[resource1.id]).toBe(`${(0, test_utils_js_1.exportDir)()}/_resources/photo.jpg`);
        expect(exporter.context().destResourcePaths[resource2.id]).toBe(`${(0, test_utils_js_1.exportDir)()}/_resources/photo-1.jpg`);
    })));
    it('should handle duplicate note names', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        const note1_2 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder1.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1_2);
        yield exporter.processItem(Folder_1.default.modelType(), folder1);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        expect(Object.keys(exporter.context().notePaths).length).toBe(2);
        expect(exporter.context().notePaths[note1.id]).toBe('folder1/note1.md');
        expect(exporter.context().notePaths[note1_2.id]).toBe('folder1/note1-1.md');
    })));
    it('should not override existing files', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder1.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        yield exporter.processItem(Folder_1.default.modelType(), folder1);
        // Create a file with the path of note1 before processing note1
        yield shim_1.default.fsDriver().writeFile(`${(0, test_utils_js_1.exportDir)()}/folder1/note1.md`, 'Note content', 'utf-8');
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        expect(Object.keys(exporter.context().notePaths).length).toBe(1);
        expect(exporter.context().notePaths[note1.id]).toBe('folder1/note1-1.md');
    })));
    it('should save resource files in _resource directory', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        let note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, `${test_utils_js_1.supportDir}/photo.jpg`);
        note1 = yield Note_1.default.load(note1.id);
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder1.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        queueExportItem(BaseModel_1.default.TYPE_RESOURCE, (yield Note_1.default.linkedResourceIds(note1.body))[0]);
        const resource1 = yield Resource_1.default.load(itemsToExport[2].itemOrId);
        const folder2 = yield Folder_1.default.save({ title: 'folder2', parent_id: folder1.id });
        let note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder2.id });
        yield shim_1.default.attachFileToNote(note2, `${test_utils_js_1.supportDir}/photo.jpg`);
        note2 = yield Note_1.default.load(note2.id);
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder2.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        queueExportItem(BaseModel_1.default.TYPE_RESOURCE, (yield Note_1.default.linkedResourceIds(note2.body))[0]);
        const resource2 = yield Resource_1.default.load(itemsToExport[5].itemOrId);
        yield exporter.processResource(resource1, Resource_1.default.fullPath(resource1));
        yield exporter.processResource(resource2, Resource_1.default.fullPath(resource2));
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/_resources/photo.jpg`)).toBe(true);
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/_resources/photo-1.jpg`)).toBe(true);
    })));
    it('should create folders in fs', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const folder2 = yield Folder_1.default.save({ title: 'folder2', parent_id: folder1.id });
        const note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder2.id });
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        const folder3 = yield Folder_1.default.save({ title: 'folder3', parent_id: folder1.id });
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder3.id);
        yield exporter.processItem(Folder_1.default.modelType(), folder2);
        yield exporter.processItem(Folder_1.default.modelType(), folder3);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        yield exporter.processItem(Note_1.default.modelType(), note2);
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/folder1`)).toBe(true);
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/folder1/folder2`)).toBe(true);
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/folder1/folder3`)).toBe(true);
    })));
    it('should save notes in fs', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder1.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        const folder2 = yield Folder_1.default.save({ title: 'folder2', parent_id: folder1.id });
        const note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder2.id });
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder2.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        const folder3 = yield Folder_1.default.save({ title: 'folder3' });
        const note3 = yield Note_1.default.save({ title: 'note3', parent_id: folder3.id });
        queueExportItem(BaseModel_1.default.TYPE_FOLDER, folder3.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note3);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        yield exporter.processItem(Note_1.default.modelType(), note1);
        yield exporter.processItem(Note_1.default.modelType(), note2);
        yield exporter.processItem(Note_1.default.modelType(), note3);
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note1.id]}`)).toBe(true);
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note2.id]}`)).toBe(true);
        expect(yield shim_1.default.fsDriver().exists(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note3.id]}`)).toBe(true);
    })));
    it('should replace resource ids with relative paths', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        let note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        yield shim_1.default.attachFileToNote(note1, `${test_utils_js_1.supportDir}/photo.jpg`);
        note1 = yield Note_1.default.load(note1.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        const resource1 = yield Resource_1.default.load((yield Note_1.default.linkedResourceIds(note1.body))[0]);
        const folder2 = yield Folder_1.default.save({ title: 'folder2', parent_id: folder1.id });
        let note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder2.id });
        yield shim_1.default.attachFileToNote(note2, `${test_utils_js_1.supportDir}/photo.jpg`);
        note2 = yield Note_1.default.load(note2.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        const resource2 = yield Resource_1.default.load((yield Note_1.default.linkedResourceIds(note2.body))[0]);
        let note3 = yield Note_1.default.save({ title: 'note3', parent_id: folder2.id });
        yield shim_1.default.attachFileToNote(note3, `${test_utils_js_1.supportDir}/photo.jpg`);
        note3 = yield Note_1.default.load(note3.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note3);
        const resource3 = yield Resource_1.default.load((yield Note_1.default.linkedResourceIds(note3.body))[0]);
        note3 = yield Note_1.default.save(Object.assign(Object.assign({}, note3), { body: `<img src=":/${resource3.id}" alt="alt">` }));
        note3 = yield Note_1.default.load(note3.id);
        let note4 = yield Note_1.default.save({ title: 'note4', parent_id: folder2.id });
        yield shim_1.default.attachFileToNote(note4, `${test_utils_js_1.supportDir}/photo.jpg`);
        note4 = yield Note_1.default.load(note4.id);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note4);
        const resource4 = yield Resource_1.default.load((yield Note_1.default.linkedResourceIds(note4.body))[0]);
        note4 = yield Note_1.default.save(Object.assign(Object.assign({}, note4), { body: `![](:/${resource4.id} "title")` }));
        note4 = yield Note_1.default.load(note4.id);
        yield exporter.processItem(Folder_1.default.modelType(), folder1);
        yield exporter.processItem(Folder_1.default.modelType(), folder2);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        yield exporter.processResource(resource1, Resource_1.default.fullPath(resource1));
        yield exporter.processResource(resource2, Resource_1.default.fullPath(resource2));
        yield exporter.processResource(resource3, Resource_1.default.fullPath(resource3));
        yield exporter.processResource(resource4, Resource_1.default.fullPath(resource3));
        const context = {
            resourcePaths: {},
        };
        context.resourcePaths[resource1.id] = 'resource1.jpg';
        context.resourcePaths[resource2.id] = 'resource2.jpg';
        context.resourcePaths[resource3.id] = 'resource3.jpg';
        context.resourcePaths[resource4.id] = 'resource3.jpg';
        exporter.updateContext(context);
        yield exporter.processItem(Note_1.default.modelType(), note1);
        yield exporter.processItem(Note_1.default.modelType(), note2);
        yield exporter.processItem(Note_1.default.modelType(), note3);
        yield exporter.processItem(Note_1.default.modelType(), note4);
        const note1_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note1.id]}`);
        const note2_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note2.id]}`);
        const note3_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note3.id]}`);
        const note4_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note4.id]}`);
        expect(note1_body).toContain('](../_resources/photo.jpg)');
        expect(note2_body).toContain('](../../_resources/photo-1.jpg)');
        expect(note3_body).toContain('<img src="../../_resources/photo-2.jpg" alt="alt">');
        expect(note4_body).toContain('](../../_resources/photo-3.jpg "title")');
    })));
    it('should replace note ids with relative paths', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const changeNoteBodyAndReload = (note, newBody) => __awaiter(this, void 0, void 0, function* () {
            note.body = newBody;
            yield Note_1.default.save(note);
            return yield Note_1.default.load(note.id);
        });
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        let note1 = yield Note_1.default.save({ title: 'note1', parent_id: folder1.id });
        const folder2 = yield Folder_1.default.save({ title: 'folder2', parent_id: folder1.id });
        let note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder2.id });
        const folder3 = yield Folder_1.default.save({ title: 'folder3' });
        let note3 = yield Note_1.default.save({ title: 'note3', parent_id: folder3.id });
        note1 = yield changeNoteBodyAndReload(note1, `# Some text \n\n [A link to note3](:/${note3.id})`);
        note2 = yield changeNoteBodyAndReload(note2, `# Some text \n\n [A link to note3](:/${note3.id}) some more text \n ## And some headers \n and [A link to note1](:/${note1.id}) more links`);
        note3 = yield changeNoteBodyAndReload(note3, `[A link to note3](:/${note2.id})`);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note3);
        yield exporter.processItem(Folder_1.default.modelType(), folder1);
        yield exporter.processItem(Folder_1.default.modelType(), folder2);
        yield exporter.processItem(Folder_1.default.modelType(), folder3);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        yield exporter.processItem(Note_1.default.modelType(), note1);
        yield exporter.processItem(Note_1.default.modelType(), note2);
        yield exporter.processItem(Note_1.default.modelType(), note3);
        const note1_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note1.id]}`);
        const note2_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note2.id]}`);
        const note3_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note3.id]}`);
        expect(note1_body).toContain('](../folder3/note3.md)');
        expect(note2_body).toContain('](../../folder3/note3.md)');
        expect(note2_body).toContain('](../../folder1/note1.md)');
        expect(note3_body).toContain('](../folder1/folder2/note2.md)');
    })));
    it('should url encode relative note links', (() => __awaiter(this, void 0, void 0, function* () {
        const exporter = new InteropService_Exporter_Md_1.default();
        yield exporter.init((0, test_utils_js_1.exportDir)());
        const itemsToExport = [];
        const queueExportItem = (itemType, itemOrId) => {
            itemsToExport.push({
                type: itemType,
                itemOrId: itemOrId,
            });
        };
        const folder1 = yield Folder_1.default.save({ title: 'folder with space1' });
        const note1 = yield Note_1.default.save({ title: 'note1 name with space', parent_id: folder1.id });
        const note2 = yield Note_1.default.save({ title: 'note2', parent_id: folder1.id, body: `[link](:/${note1.id})` });
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note1);
        queueExportItem(BaseModel_1.default.TYPE_NOTE, note2);
        yield exporter.processItem(Folder_1.default.modelType(), folder1);
        yield exporter.prepareForProcessingItemType(BaseModel_1.default.TYPE_NOTE, itemsToExport);
        yield exporter.processItem(Note_1.default.modelType(), note1);
        yield exporter.processItem(Note_1.default.modelType(), note2);
        const note2_body = yield shim_1.default.fsDriver().readFile(`${(0, test_utils_js_1.exportDir)()}/${exporter.context().notePaths[note2.id]}`);
        expect(note2_body).toContain('[link](../folder%20with%20space1/note1%20name%20with%20space.md)');
    })));
    it('should preserve resource file extension', (() => __awaiter(this, void 0, void 0, function* () {
        const folder = yield Folder_1.default.save({ title: 'testing' });
        const note = yield Note_1.default.save({ title: 'mynote', parent_id: folder.id });
        yield shim_1.default.attachFileToNote(note, `${test_utils_js_1.supportDir}/photo.jpg`);
        const resource = (yield Resource_1.default.all())[0];
        yield Resource_1.default.save({ id: resource.id, title: 'veryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitleveryverylongtitle.jpg' });
        const service = InteropService_js_1.default.instance();
        yield service.export({
            path: (0, test_utils_js_1.exportDir)(),
            format: 'md',
        });
        const resourceFilename = (yield fs.readdir(`${(0, test_utils_js_1.exportDir)()}/_resources`))[0];
        expect((0, path_utils_js_1.fileExtension)(resourceFilename)).toBe('jpg');
    })));
});
//# sourceMappingURL=InteropService_Exporter_Md.test.js.map