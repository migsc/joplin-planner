"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const InteropService_Exporter_Base_1 = require("./InteropService_Exporter_Base");
const BaseItem_1 = require("../../models/BaseItem");
const { basename } = require('../../path-utils');
const shim_1 = require("../../shim");
class InteropService_Exporter_Raw extends InteropService_Exporter_Base_1.default {
    init(destDir) {
        return __awaiter(this, void 0, void 0, function* () {
            this.destDir_ = destDir;
            this.resourceDir_ = destDir ? `${destDir}/resources` : null;
            yield shim_1.default.fsDriver().mkdir(this.destDir_);
            yield shim_1.default.fsDriver().mkdir(this.resourceDir_);
        });
    }
    processItem(itemType, item) {
        return __awaiter(this, void 0, void 0, function* () {
            const ItemClass = BaseItem_1.default.getClassByItemType(itemType);
            const serialized = yield ItemClass.serialize(item);
            const filePath = `${this.destDir_}/${ItemClass.systemPath(item)}`;
            yield shim_1.default.fsDriver().writeFile(filePath, serialized, 'utf-8');
        });
    }
    processResource(_resource, filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const destResourcePath = `${this.resourceDir_}/${basename(filePath)}`;
            yield shim_1.default.fsDriver().copy(filePath, destResourcePath);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
}
exports.default = InteropService_Exporter_Raw;
//# sourceMappingURL=InteropService_Exporter_Raw.js.map