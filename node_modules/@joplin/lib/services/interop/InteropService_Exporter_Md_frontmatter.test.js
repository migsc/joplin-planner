"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const InteropService_1 = require("../../services/interop/InteropService");
const test_utils_1 = require("../../testing/test-utils");
const Folder_1 = require("../../models/Folder");
const Note_1 = require("../../models/Note");
const Tag_1 = require("../../models/Tag");
const time_1 = require("../../time");
const InteropService_Exporter_Md_frontmatter_1 = require("./InteropService_Exporter_Md_frontmatter");
const fs = require("fs-extra");
function recreateExportDir() {
    return __awaiter(this, void 0, void 0, function* () {
        const dir = (0, test_utils_1.exportDir)();
        yield fs.remove(dir);
        yield fs.mkdirp(dir);
    });
}
describe('interop/InteropService_Exporter_Md_frontmatter', function () {
    function exportAndLoad(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = InteropService_1.default.instance();
            yield service.export({
                path: (0, test_utils_1.exportDir)(),
                format: 'md_frontmatter',
            });
            return yield fs.readFile(path, 'utf8');
        });
    }
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_1.switchClient)(1);
        yield recreateExportDir();
        done();
    }));
    test('should export MD file with YAML header', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        yield Note_1.default.save({ title: 'ma', latitude: 58.2222, user_updated_time: 1, user_created_time: 1, body: '**ma note**', parent_id: folder1.id });
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/ma.md`);
        expect(content.startsWith('---')).toBe(true);
        expect(content).toContain('title: ma');
        expect(content).toContain('updated:'); // Will be current time of test run
        expect(content).toContain(`created: ${time_1.default.unixMsToRfc3339Sec(1)}`);
        expect(content).toContain('latitude: 58.22220000');
        expect(content).toContain('longitude: 0.00000000');
        expect(content).toContain('altitude: 0.0000');
        expect(content).toContain('**ma note**');
        expect(content).not.toContain('completed?');
        expect(content).not.toContain('author');
        expect(content).not.toContain('source');
        expect(content).not.toContain('due');
    })));
    test('should export without additional quotes', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        yield Note_1.default.save({ title: '-60', body: '**ma note**', parent_id: folder1.id });
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/-60.md`);
        expect(content).toContain('title: -60');
    })));
    test('should export tags', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note = yield Note_1.default.save({ title: 'Title', body: '**ma note**', parent_id: folder1.id });
        yield Tag_1.default.addNoteTagByTitle(note.id, 'lamp');
        yield Tag_1.default.addNoteTagByTitle(note.id, 'moth');
        yield Tag_1.default.addNoteTagByTitle(note.id, 'godzilla');
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/Title.md`);
        expect(content).toContain('tags:\n  - godzilla\n  - lamp\n  - moth');
    })));
    test('should export todo', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        yield Note_1.default.save({ title: 'Todo', is_todo: 1, todo_due: 1, body: '**ma note**', parent_id: folder1.id });
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/Todo.md`);
        expect(content).toContain(`due: ${time_1.default.unixMsToRfc3339Sec(1)}`);
        expect(content).toContain('completed?: no');
    })));
    test('should export author', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        yield Note_1.default.save({ title: 'Author', author: 'Scott Joplin', body: '**ma note**', parent_id: folder1.id });
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/Author.md`);
        expect(content).toContain('author: Scott Joplin');
    })));
    test('should export source', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        yield Note_1.default.save({ title: 'Source', source_url: 'https://joplinapp.org', body: '**ma note**', parent_id: folder1.id });
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/Source.md`);
        expect(content).toContain('source: https://joplinapp.org');
    })));
    test('should export fields in the correct order', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        const note = yield Note_1.default.save({
            title: 'Fields',
            is_todo: 1,
            todo_due: 1,
            author: 'Scott Joplin',
            source_url: 'https://joplinapp.org',
            body: '**ma note**',
            parent_id: folder1.id,
        });
        yield Tag_1.default.addNoteTagByTitle(note.id, 'piano');
        yield Tag_1.default.addNoteTagByTitle(note.id, 'greatness');
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/Fields.md`);
        const fieldIndices = InteropService_Exporter_Md_frontmatter_1.fieldOrder.map(field => content.indexOf(field));
        expect(fieldIndices).toBe(fieldIndices.sort());
    })));
    test('should export title with a newline encoded', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        yield Note_1.default.save({ title: 'Source\ntitle', body: '**ma note**', parent_id: folder1.id });
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/Source_title.md`);
        expect(content).toContain('title: |-\n  Source\n  title');
    })));
    test('should not export coordinates if they\'re not available', (() => __awaiter(this, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: 'folder1' });
        yield Note_1.default.save({ title: 'Coordinates', body: '**ma note**', parent_id: folder1.id });
        const content = yield exportAndLoad(`${(0, test_utils_1.exportDir)()}/folder1/Coordinates.md`);
        expect(content).not.toContain('latitude');
        expect(content).not.toContain('longitude');
        expect(content).not.toContain('altitude');
    })));
});
//# sourceMappingURL=InteropService_Exporter_Md_frontmatter.test.js.map