"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const InteropService_Importer_Base_1 = require("./InteropService_Importer_Base");
class InteropService_Importer_Custom extends InteropService_Importer_Base_1.default {
    constructor(handler) {
        super();
        this.module_ = null;
        this.module_ = handler;
    }
    exec(result) {
        return __awaiter(this, void 0, void 0, function* () {
            // When passing the options to the plugin, we strip off any function
            // because they won't serialized over ipc.
            const processedOptions = {};
            if (this.options_) {
                for (const [k, v] of Object.entries(this.options_)) {
                    if (typeof v === 'function')
                        continue;
                    processedOptions[k] = v;
                }
            }
            return this.module_.onExec({
                sourcePath: this.sourcePath_,
                options: processedOptions,
                warnings: result.warnings,
            });
        });
    }
}
exports.default = InteropService_Importer_Custom;
//# sourceMappingURL=InteropService_Importer_Custom.js.map