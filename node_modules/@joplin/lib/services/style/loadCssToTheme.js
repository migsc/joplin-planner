"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_utils_1 = require("../../path-utils");
const shim_1 = require("../../shim");
const cssToTheme_1 = require("./cssToTheme");
function default_1(cssBaseDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const themeDirs = (yield shim_1.default.fsDriver().readDirStats(cssBaseDir)).filter((f) => f.isDirectory());
        const output = {};
        for (const themeDir of themeDirs) {
            const themeName = (0, path_utils_1.filename)(themeDir.path);
            const cssFile = `${cssBaseDir}/${themeDir.path}/colors.css`;
            const cssContent = yield shim_1.default.fsDriver().readFile(cssFile, 'utf8');
            let themeId = themeName;
            const manifestFile = `${cssBaseDir}/${themeDir.path}/manifest.json`;
            if (yield shim_1.default.fsDriver().exists(manifestFile)) {
                const manifest = JSON.parse(yield shim_1.default.fsDriver().readFile(manifestFile, 'utf8'));
                if (manifest.id)
                    themeId = manifest.id;
            }
            output[themeId] = (0, cssToTheme_1.default)(cssContent, cssFile);
        }
        return output;
    });
}
exports.default = default_1;
//# sourceMappingURL=loadCssToTheme.js.map