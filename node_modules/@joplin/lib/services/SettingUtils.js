"use strict";
/* eslint-disable import/prefer-default-export */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadKeychainServiceAndSettings = void 0;
const KeychainService_1 = require("./keychain/KeychainService");
const Setting_1 = require("../models/Setting");
const uuid_1 = require("../uuid");
const syncInfoUtils_1 = require("./synchronizer/syncInfoUtils");
// This function takes care of initialising both the keychain service and settings.
//
// Loading the settings became more complicated with the keychain integration. This is because
// the settings needs a keychain service, and the keychain service needs a clientId, which
// is set dynamically and saved to the settings.
// In other words, it's not possible to load the settings without the KS service and it's not
// possible to initialise the KS service without the settings.
// The solution is to fetch just the client ID directly from the database.
function loadKeychainServiceAndSettings(KeychainServiceDriver) {
    return __awaiter(this, void 0, void 0, function* () {
        const clientIdSetting = yield Setting_1.default.loadOne('clientId');
        const clientId = clientIdSetting ? clientIdSetting.value : uuid_1.default.create();
        KeychainService_1.default.instance().initialize(new KeychainServiceDriver(Setting_1.default.value('appId'), clientId));
        Setting_1.default.setKeychainService(KeychainService_1.default.instance());
        yield Setting_1.default.load();
        // This is part of the migration to the new sync target info. It needs to be
        // set as early as possible since it's used to tell if E2EE is enabled, it
        // contains the master keys, etc. Once it has been set, it becomes a noop
        // on future calls.
        yield (0, syncInfoUtils_1.migrateLocalSyncInfo)(Setting_1.default.db());
        if (!clientIdSetting)
            Setting_1.default.setValue('clientId', clientId);
        yield KeychainService_1.default.instance().detectIfKeychainSupported();
    });
}
exports.loadKeychainServiceAndSettings = loadKeychainServiceAndSettings;
//# sourceMappingURL=SettingUtils.js.map