"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_js_1 = require("../../testing/test-utils.js");
const SearchEngine_1 = require("../../services/searchengine/SearchEngine");
const SearchEngineUtils_1 = require("../../services/searchengine/SearchEngineUtils");
const Setting_1 = require("../../models/Setting");
const Note = require('../../models/Note').default;
let searchEngine = null;
describe('services_SearchEngineUtils', function () {
    beforeEach((done) => __awaiter(this, void 0, void 0, function* () {
        yield (0, test_utils_js_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_js_1.switchClient)(1);
        searchEngine = new SearchEngine_1.default();
        searchEngine.setDb((0, test_utils_js_1.db)());
        done();
    }));
    describe('filter todos based on showCompletedTodos', function () {
        it('show completed', (() => __awaiter(this, void 0, void 0, function* () {
            const note1 = yield Note.save({ title: 'abcd', body: 'body 1' });
            const todo1 = yield Note.save({ title: 'abcd', body: 'todo 1', is_todo: 1 });
            const todo2 = yield Note.save({ title: 'abcd', body: 'todo 2', is_todo: 1, todo_completed: 1590085027710 });
            yield Note.save({ title: 'qwer', body: 'body 2' });
            yield searchEngine.syncTables();
            Setting_1.default.setValue('showCompletedTodos', true);
            const rows = yield SearchEngineUtils_1.default.notesForQuery('abcd', true, null, searchEngine);
            expect(rows.length).toBe(3);
            expect(rows.map(r => r.id)).toContain(note1.id);
            expect(rows.map(r => r.id)).toContain(todo1.id);
            expect(rows.map(r => r.id)).toContain(todo2.id);
            const options = {};
            options.fields = ['id', 'title'];
            const rows2 = yield SearchEngineUtils_1.default.notesForQuery('abcd', true, options, searchEngine);
            expect(rows2.length).toBe(3);
            expect(rows2.map(r => r.id)).toContain(note1.id);
            expect(rows2.map(r => r.id)).toContain(todo1.id);
            expect(rows2.map(r => r.id)).toContain(todo2.id);
        })));
        it('hide completed', (() => __awaiter(this, void 0, void 0, function* () {
            const note1 = yield Note.save({ title: 'abcd', body: 'body 1' });
            const todo1 = yield Note.save({ title: 'abcd', body: 'todo 1', is_todo: 1 });
            yield Note.save({ title: 'qwer', body: 'body 2' });
            yield Note.save({ title: 'abcd', body: 'todo 2', is_todo: 1, todo_completed: 1590085027710 });
            yield searchEngine.syncTables();
            Setting_1.default.setValue('showCompletedTodos', false);
            const rows = yield SearchEngineUtils_1.default.notesForQuery('abcd', true, null, searchEngine);
            expect(rows.length).toBe(2);
            expect(rows.map(r => r.id)).toContain(note1.id);
            expect(rows.map(r => r.id)).toContain(todo1.id);
            const options = {};
            options.fields = ['id', 'title'];
            const rows2 = yield SearchEngineUtils_1.default.notesForQuery('abcd', true, options, searchEngine);
            expect(rows2.length).toBe(2);
            expect(rows2.map(r => r.id)).toContain(note1.id);
            expect(rows2.map(r => r.id)).toContain(todo1.id);
        })));
        it('show completed (!applyUserSettings)', (() => __awaiter(this, void 0, void 0, function* () {
            const note1 = yield Note.save({ title: 'abcd', body: 'body 1' });
            const todo1 = yield Note.save({ title: 'abcd', body: 'todo 1', is_todo: 1 });
            yield Note.save({ title: 'qwer', body: 'body 2' });
            const todo2 = yield Note.save({ title: 'abcd', body: 'todo 2', is_todo: 1, todo_completed: 1590085027710 });
            yield searchEngine.syncTables();
            Setting_1.default.setValue('showCompletedTodos', false);
            const rows = yield SearchEngineUtils_1.default.notesForQuery('abcd', false, null, searchEngine);
            expect(rows.length).toBe(3);
            expect(rows.map(r => r.id)).toContain(note1.id);
            expect(rows.map(r => r.id)).toContain(todo1.id);
            expect(rows.map(r => r.id)).toContain(todo2.id);
        })));
    });
    it('remove auto added fields', (() => __awaiter(this, void 0, void 0, function* () {
        yield Note.save({ title: 'abcd', body: 'body 1' });
        yield searchEngine.syncTables();
        const testCases = [
            ['title', 'todo_due'],
            ['title', 'todo_completed'],
            ['title'],
            ['title', 'todo_completed', 'todo_due'],
        ];
        for (const testCase of testCases) {
            const rows = yield SearchEngineUtils_1.default.notesForQuery('abcd', false, { fields: [...testCase] }, searchEngine);
            testCase.push('type_');
            expect(Object.keys(rows[0]).length).toBe(testCase.length);
            for (const field of testCase) {
                expect(rows[0]).toHaveProperty(field);
            }
        }
    })));
});
//# sourceMappingURL=SearchEngineUtils.test.js.map