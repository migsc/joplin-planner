"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SearchEngine_1 = require("./SearchEngine");
const Note_1 = require("../../models/Note");
const Setting_1 = require("../../models/Setting");
class SearchEngineUtils {
    static notesForQuery(query, applyUserSettings, options = null, searchEngine = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options)
                options = {};
            if (!searchEngine) {
                searchEngine = SearchEngine_1.default.instance();
            }
            let searchType = SearchEngine_1.default.SEARCH_TYPE_FTS;
            if (query.length && query[0] === '/') {
                query = query.substr(1);
                searchType = SearchEngine_1.default.SEARCH_TYPE_BASIC;
            }
            const results = yield searchEngine.search(query, { searchType });
            const noteIds = results.map((n) => n.id);
            // We need at least the note ID to be able to sort them below so if not
            // present in field list, add it.L Also remember it was auto-added so that
            // it can be removed afterwards.
            let idWasAutoAdded = false;
            const fields = options.fields ? options.fields : Note_1.default.previewFields().slice();
            if (fields.indexOf('id') < 0) {
                fields.push('id');
                idWasAutoAdded = true;
            }
            // Add fields is_todo and todo_completed for showCompletedTodos filtering.
            // Also remember that the field  was auto-added so that it can be removed afterwards.
            let isTodoAutoAdded = false;
            if (fields.indexOf('is_todo') < 0) {
                fields.push('is_todo');
                isTodoAutoAdded = true;
            }
            let todoCompletedAutoAdded = false;
            if (fields.indexOf('todo_completed') < 0) {
                fields.push('todo_completed');
                todoCompletedAutoAdded = true;
            }
            const previewOptions = Object.assign({}, {
                order: [],
                fields: fields,
                conditions: [`id IN ("${noteIds.join('","')}")`],
            }, options);
            const notes = yield Note_1.default.previews(null, previewOptions);
            // Filter completed todos
            let filteredNotes = [...notes];
            if (applyUserSettings && !Setting_1.default.value('showCompletedTodos')) {
                filteredNotes = notes.filter(note => note.is_todo === 0 || (note.is_todo === 1 && note.todo_completed === 0));
            }
            // By default, the notes will be returned in reverse order
            // or maybe random order so sort them here in the correct order
            // (search engine returns the results in order of relevance).
            const sortedNotes = [];
            for (let i = 0; i < filteredNotes.length; i++) {
                const idx = noteIds.indexOf(filteredNotes[i].id);
                sortedNotes[idx] = filteredNotes[i];
                if (idWasAutoAdded)
                    delete sortedNotes[idx].id;
                if (todoCompletedAutoAdded)
                    delete sortedNotes[idx].todo_completed;
                if (isTodoAutoAdded)
                    delete sortedNotes[idx].is_todo;
            }
            // Note that when the search engine index is somehow corrupted, it might
            // contain references to notes that don't exist. Not clear how it can
            // happen, but anyway handle it here. Was causing this issue:
            // https://discourse.joplinapp.org/t/how-to-recover-corrupted-database/9367
            return sortedNotes.filter(n => n);
        });
    }
}
exports.default = SearchEngineUtils;
//# sourceMappingURL=SearchEngineUtils.js.map