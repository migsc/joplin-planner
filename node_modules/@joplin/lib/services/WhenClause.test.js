"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WhenClause_1 = require("./WhenClause");
describe('WhenClause', function () {
    test('should work with simple condition', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = new WhenClause_1.default('test1 && test2');
            expect(wc.evaluate({
                test1: true,
                test2: true,
            })).toBe(true);
            expect(wc.evaluate({
                test1: true,
                test2: false,
            })).toBe(false);
        });
    });
    test('should work with parenthesis', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = new WhenClause_1.default('(test1 && test2) || test3 && (test4 && !test5)');
            expect(wc.evaluate({
                test1: true,
                test2: true,
                test3: true,
                test4: true,
                test5: true,
            })).toBe(true);
            expect(wc.evaluate({
                test1: false,
                test2: true,
                test3: false,
                test4: false,
                test5: true,
            })).toBe(false);
        });
    });
});
//# sourceMappingURL=WhenClause.test.js.map