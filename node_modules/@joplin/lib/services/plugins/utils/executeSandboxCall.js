"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function createEventHandlers(arg, eventHandler) {
    if (Array.isArray(arg)) {
        for (let i = 0; i < arg.length; i++) {
            arg[i] = createEventHandlers(arg[i], eventHandler);
        }
        return arg;
    }
    else if (typeof arg === 'string' && arg.indexOf('___plugin_event_') === 0) {
        const callbackId = arg;
        return (...args) => __awaiter(this, void 0, void 0, function* () {
            const result = yield eventHandler(callbackId, args);
            return result;
        });
    }
    else if (arg === null || arg === undefined) {
        return arg;
    }
    else if (typeof arg === 'object') {
        for (const n in arg) {
            arg[n] = createEventHandlers(arg[n], eventHandler);
        }
    }
    return arg;
}
function executeSandboxCall(pluginId, sandbox, path, args, eventHandler) {
    return __awaiter(this, void 0, void 0, function* () {
        const pathFragments = path.split('.');
        let parent = null;
        let fn = sandbox;
        if (!fn)
            throw new Error(`No sandbox for plugin ${pluginId}`); // Sanity check as normally cannot happen
        for (const pathFragment of pathFragments) {
            parent = fn;
            fn = fn[pathFragment];
            if (!fn)
                throw new Error(`Property or method "${pathFragment}" does not exist in "${path}"`);
        }
        const convertedArgs = createEventHandlers(args, eventHandler);
        return fn.apply(parent, convertedArgs);
    });
}
exports.default = executeSandboxCall;
//# sourceMappingURL=executeSandboxCall.js.map