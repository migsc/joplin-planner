"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const InteropService_1 = require("../../interop/InteropService");
const types_1 = require("../../interop/types");
/**
 * Provides a way to create modules to import external data into Joplin or to export notes into any arbitrary format.
 *
 * [View the demo plugin](https://github.com/laurent22/joplin/tree/dev/packages/app-cli/tests/support/plugins/json_export)
 *
 * To implement an import or export module, you would simply define an object with various event handlers that are called
 * by the application during the import/export process.
 *
 * See the documentation of the [[ExportModule]] and [[ImportModule]] for more information.
 *
 * You may also want to refer to the Joplin API documentation to see the list of properties for each item (note, notebook, etc.) - https://joplinapp.org/api/references/rest_api/
 */
class JoplinInterop {
    registerExportModule(module) {
        return __awaiter(this, void 0, void 0, function* () {
            const internalModule = Object.assign(Object.assign({}, module), { type: types_1.ModuleType.Exporter, isCustom: true, fileExtensions: module.fileExtensions ? module.fileExtensions : [] });
            return InteropService_1.default.instance().registerModule(internalModule);
        });
    }
    registerImportModule(module) {
        return __awaiter(this, void 0, void 0, function* () {
            const internalModule = Object.assign(Object.assign({}, module), { type: types_1.ModuleType.Importer, isCustom: true, fileExtensions: module.fileExtensions ? module.fileExtensions : [] });
            return InteropService_1.default.instance().registerModule(internalModule);
        });
    }
}
exports.default = JoplinInterop;
//# sourceMappingURL=JoplinInterop.js.map