"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const KeymapService_1 = require("../../KeymapService");
const types_1 = require("./types");
const MenuItemController_1 = require("../MenuItemController");
const createViewHandle_1 = require("../utils/createViewHandle");
/**
 * Allows creating and managing menu items.
 *
 * [View the demo plugin](https://github.com/laurent22/joplin/tree/dev/packages/app-cli/tests/support/plugins/register_command)
 */
class JoplinViewsMenuItems {
    constructor(plugin, store) {
        this.store = store;
        this.plugin = plugin;
    }
    /**
     * Creates a new menu item and associate it with the given command. You can specify under which menu the item should appear using the `location` parameter.
     */
    create(id, commandName, location = types_1.MenuItemLocation.Tools, options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof location !== 'string') {
                this.plugin.deprecationNotice('1.5', 'Creating a view without an ID is deprecated. To fix it, change your call to `joplin.views.menuItem.create("my-unique-id", ...)`', true);
                options = location;
                location = commandName || types_1.MenuItemLocation.Tools;
                commandName = id;
                id = `${this.plugin.viewCount}`;
            }
            const handle = (0, createViewHandle_1.default)(this.plugin, id);
            const controller = new MenuItemController_1.default(handle, this.plugin.id, this.store, commandName, location);
            this.plugin.addViewController(controller);
            // Register the command with the keymap service - not that if no
            // accelerator is provided, we still register the command, so that
            // it appears in the keymap editor, which will allow the user to
            // set a custom shortcut.
            //
            // https://discourse.joplinapp.org/t/plugin-note-tabs/12752/39
            if (options && options.accelerator) {
                KeymapService_1.default.instance().registerCommandAccelerator(commandName, options.accelerator);
            }
            else {
                KeymapService_1.default.instance().registerCommandAccelerator(commandName, null);
            }
        });
    }
}
exports.default = JoplinViewsMenuItems;
//# sourceMappingURL=JoplinViewsMenuItems.js.map