"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createViewHandle_1 = require("../utils/createViewHandle");
const WebviewController_1 = require("../WebviewController");
/**
 * Allows creating and managing dialogs. A dialog is modal window that
 * contains a webview and a row of buttons. You can update the
 * webview using the `setHtml` method. Dialogs are hidden by default and
 * you need to call `open()` to open them. Once the user clicks on a
 * button, the `open` call will return an object indicating what button was
 * clicked on.
 *
 * ## Retrieving form values
 *
 * If your HTML content included one or more forms, a `formData` object
 * will also be included with the key/value for each form.
 *
 * ## Special button IDs
 *
 * The following buttons IDs have a special meaning:
 *
 * - `ok`, `yes`, `submit`, `confirm`: They are considered "submit" buttons
 * - `cancel`, `no`, `reject`: They are considered "dismiss" buttons
 *
 * This information is used by the application to determine what action
 * should be done when the user presses "Enter" or "Escape" within the
 * dialog. If they press "Enter", the first "submit" button will be
 * automatically clicked. If they press "Escape" the first "dismiss" button
 * will be automatically clicked.
 *
 * [View the demo
 * plugin](https://github.com/laurent22/joplin/tree/dev/packages/app-cli/tests/support/plugins/dialog)
 */
class JoplinViewsDialogs {
    constructor(implementation, plugin, store) {
        this.store = store;
        this.plugin = plugin;
        this.implementation_ = implementation;
    }
    controller(handle) {
        return this.plugin.viewController(handle);
    }
    /**
     * Creates a new dialog
     */
    create(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                this.plugin.deprecationNotice('1.5', 'Creating a view without an ID is deprecated. To fix it, change your call to `joplin.views.dialogs.create("my-unique-id")`', true);
                id = `${this.plugin.viewCount}`;
            }
            const handle = (0, createViewHandle_1.default)(this.plugin, id);
            const controller = new WebviewController_1.default(handle, this.plugin.id, this.store, this.plugin.baseDir, WebviewController_1.ContainerType.Dialog);
            this.plugin.addViewController(controller);
            return handle;
        });
    }
    /**
     * Displays a message box with OK/Cancel buttons. Returns the button index that was clicked - "0" for OK and "1" for "Cancel"
     */
    showMessageBox(message) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.implementation_.showMessageBox(message);
        });
    }
    /**
     * Sets the dialog HTML content
     */
    setHtml(handle, html) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.controller(handle).html = html;
        });
    }
    /**
     * Adds and loads a new JS or CSS files into the dialog.
     */
    addScript(handle, scriptPath) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.controller(handle).addScript(scriptPath);
        });
    }
    /**
     * Sets the dialog buttons.
     */
    setButtons(handle, buttons) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.controller(handle).buttons = buttons;
        });
    }
    /**
     * Opens the dialog
     */
    open(handle) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.controller(handle).open();
        });
    }
    /**
     * Toggle on whether to fit the dialog size to the content or not.
     * When set to false, the dialog is set to 90vw and 80vh
     * @default true
     */
    setFitToContent(handle, status) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.controller(handle).fitToContent = status;
        });
    }
}
exports.default = JoplinViewsDialogs;
//# sourceMappingURL=JoplinViewsDialogs.js.map