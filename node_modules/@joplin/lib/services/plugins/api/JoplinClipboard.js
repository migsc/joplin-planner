"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class JoplinClipboard {
    constructor(electronClipboard, electronNativeImage) {
        this.electronClipboard_ = null;
        this.electronNativeImage_ = null;
        this.electronClipboard_ = electronClipboard;
        this.electronNativeImage_ = electronNativeImage;
    }
    readText() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.electronClipboard_.readText();
        });
    }
    writeText(text) {
        return __awaiter(this, void 0, void 0, function* () {
            this.electronClipboard_.writeText(text);
        });
    }
    readHtml() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.electronClipboard_.readHTML();
        });
    }
    writeHtml(html) {
        return __awaiter(this, void 0, void 0, function* () {
            this.electronClipboard_.writeHTML(html);
        });
    }
    /**
     * Returns the image in [data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) format.
     */
    readImage() {
        return __awaiter(this, void 0, void 0, function* () {
            const image = this.electronClipboard_.readImage();
            return image ? image.toDataURL() : '';
        });
    }
    /**
     * Takes an image in [data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) format.
     */
    writeImage(dataUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            this.electronClipboard_.writeImage(this.electronNativeImage_.createFromDataURL(dataUrl));
        });
    }
    /**
     * Returns the list available formats (mime types).
     *
     * For example [ 'text/plain', 'text/html' ]
     */
    availableFormats() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.electronClipboard_.availableFormats();
        });
    }
}
exports.default = JoplinClipboard;
//# sourceMappingURL=JoplinClipboard.js.map