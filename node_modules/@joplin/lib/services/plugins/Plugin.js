"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const shim_1 = require("../../shim");
const Logger_1 = require("../../Logger");
const EventEmitter = require('events');
const logger = Logger_1.default.create('Plugin');
class Plugin {
    constructor(baseDir, manifest, scriptText, dispatch, dataDir) {
        this.viewControllers_ = {};
        this.contentScripts_ = {};
        this.devMode_ = false;
        this.messageListener_ = null;
        this.contentScriptMessageListeners_ = {};
        this.dataDirCreated_ = false;
        this.baseDir_ = shim_1.default.fsDriver().resolve(baseDir);
        this.manifest_ = manifest;
        this.scriptText_ = scriptText;
        this.dispatch_ = dispatch;
        this.dataDir_ = dataDir;
        this.eventEmitter_ = new EventEmitter();
    }
    get id() {
        return this.manifest.id;
    }
    get devMode() {
        return this.devMode_;
    }
    set devMode(v) {
        this.devMode_ = v;
    }
    get manifest() {
        return this.manifest_;
    }
    get scriptText() {
        return this.scriptText_;
    }
    get baseDir() {
        return this.baseDir_;
    }
    dataDir() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dataDirCreated_)
                return this.dataDir_;
            if (!(yield shim_1.default.fsDriver().exists(this.dataDir_))) {
                yield shim_1.default.fsDriver().mkdir(this.dataDir_);
                this.dataDirCreated_ = true;
            }
            return this.dataDir_;
        });
    }
    get viewCount() {
        return Object.keys(this.viewControllers_).length;
    }
    on(eventName, callback) {
        return this.eventEmitter_.on(eventName, callback);
    }
    off(eventName, callback) {
        return this.eventEmitter_.removeListener(eventName, callback);
    }
    emit(eventName, event = null) {
        return this.eventEmitter_.emit(eventName, event);
    }
    registerContentScript(type, id, path) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.contentScripts_[type])
                this.contentScripts_[type] = [];
            const absolutePath = shim_1.default.fsDriver().resolveRelativePathWithinDir(this.baseDir, path);
            if (!(yield shim_1.default.fsDriver().exists(absolutePath)))
                throw new Error(`Could not find content script at path ${absolutePath}`);
            this.contentScripts_[type].push({ id, path: absolutePath });
            logger.debug(`"${this.id}": Registered content script: ${type}: ${id}: ${absolutePath}`);
            this.dispatch_({
                type: 'PLUGIN_CONTENT_SCRIPTS_ADD',
                pluginId: this.id,
                contentScript: {
                    type: type,
                    id: id,
                    path: absolutePath,
                },
            });
        });
    }
    contentScriptsByType(type) {
        return this.contentScripts_[type] ? this.contentScripts_[type] : [];
    }
    contentScriptById(id) {
        for (const type in this.contentScripts_) {
            const cs = this.contentScripts_[type];
            for (const c of cs) {
                if (c.id === id)
                    return c;
            }
        }
        return null;
    }
    addViewController(v) {
        if (this.viewControllers_[v.handle])
            throw new Error(`View already added or there is already a view with this ID: ${v.handle}`);
        this.viewControllers_[v.handle] = v;
    }
    viewController(handle) {
        if (!this.viewControllers_[handle])
            throw new Error(`View not found: ${handle}`);
        return this.viewControllers_[handle];
    }
    deprecationNotice(goneInVersion, message, isError = false) {
        if (isError) {
            throw new Error(`"${this.id}": No longer supported: ${message} (deprecated since version ${goneInVersion})`);
        }
        else {
            logger.warn(`"${this.id}": DEPRECATION NOTICE: ${message} This will stop working in version ${goneInVersion}.`);
        }
    }
    emitMessage(message) {
        if (!this.messageListener_)
            return;
        return this.messageListener_(message);
    }
    onMessage(callback) {
        this.messageListener_ = callback;
    }
    onContentScriptMessage(id, callback) {
        if (!this.contentScriptById(id)) {
            // The script could potentially be registered later on, but still
            // best to print a warning to notify the user of a possible bug.
            logger.warn(`onContentScriptMessage: No such content script: ${id}`);
        }
        this.contentScriptMessageListeners_[id] = callback;
    }
    emitContentScriptMessage(id, message) {
        if (!this.contentScriptMessageListeners_[id])
            return;
        return this.contentScriptMessageListeners_[id](message);
    }
}
exports.default = Plugin;
//# sourceMappingURL=Plugin.js.map