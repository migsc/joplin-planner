"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const htmlUtils_1 = require("../../htmlUtils");
const utils_1 = require("../../utils");
function renderImageHtml(before, src, after, ruleOptions) {
    const r = utils_1.default.imageReplacement(ruleOptions.ResourceModel, src, ruleOptions.resources, ruleOptions.resourceBaseUrl, ruleOptions.itemIdToUrl);
    if (typeof r === 'string')
        return r;
    if (r)
        return `<img ${before} ${(0, htmlUtils_1.attributesHtml)(r)} ${after}/>`;
    return `[Image: ${src}]`;
}
function plugin(markdownIt, ruleOptions) {
    const Resource = ruleOptions.ResourceModel;
    const htmlBlockDefaultRender = markdownIt.renderer.rules.html_block ||
        function (tokens, idx, options, _env, self) {
            return self.renderToken(tokens, idx, options);
        };
    const htmlInlineDefaultRender = markdownIt.renderer.rules.html_inline ||
        function (tokens, idx, options, _env, self) {
            return self.renderToken(tokens, idx, options);
        };
    const imageRegex = /<img(.*?)src=["'](.*?)["'](.*?)>/gi;
    // eslint-disable-next-line @typescript-eslint/ban-types -- Old code before rule was applied
    const handleImageTags = function (defaultRender) {
        return function (tokens, idx, options, env, self) {
            const token = tokens[idx];
            const content = token.content;
            if (!content.match(imageRegex))
                return defaultRender(tokens, idx, options, env, self);
            return content.replace(imageRegex, (_v, before, src, after) => {
                if (!Resource.isResourceUrl(src))
                    return `<img${before}src="${src}"${after}>`;
                return renderImageHtml(before, src, after, ruleOptions);
            });
        };
    };
    // It seems images sometimes are inline, sometimes a block
    // to make sure they both render correctly.
    markdownIt.renderer.rules.html_block = handleImageTags(htmlBlockDefaultRender);
    markdownIt.renderer.rules.html_inline = handleImageTags(htmlInlineDefaultRender);
}
exports.default = { plugin };
//# sourceMappingURL=html_image.js.map