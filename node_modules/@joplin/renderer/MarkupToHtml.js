"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkupLanguage = void 0;
const MdToHtml_1 = require("./MdToHtml");
const HtmlToHtml_1 = require("./HtmlToHtml");
const htmlUtils_1 = require("./htmlUtils");
const html_entities_1 = require("html-entities");
const MarkdownIt = require('markdown-it');
var MarkupLanguage;
(function (MarkupLanguage) {
    MarkupLanguage[MarkupLanguage["Markdown"] = 1] = "Markdown";
    MarkupLanguage[MarkupLanguage["Html"] = 2] = "Html";
    MarkupLanguage[MarkupLanguage["Any"] = 3] = "Any";
})(MarkupLanguage || (exports.MarkupLanguage = MarkupLanguage = {}));
class MarkupToHtml {
    constructor(options = null) {
        this.renderers_ = {};
        this.options_ = Object.assign({ ResourceModel: {
                isResourceUrl: () => false,
            }, isSafeMode: false }, options);
    }
    renderer(markupLanguage) {
        if (this.renderers_[markupLanguage])
            return this.renderers_[markupLanguage];
        let RendererClass = null;
        if (markupLanguage === MarkupToHtml.MARKUP_LANGUAGE_MARKDOWN) {
            RendererClass = MdToHtml_1.default;
        }
        else if (markupLanguage === MarkupToHtml.MARKUP_LANGUAGE_HTML) {
            RendererClass = HtmlToHtml_1.default;
        }
        else {
            throw new Error(`Invalid markup language: ${markupLanguage}`);
        }
        this.renderers_[markupLanguage] = new RendererClass(this.options_);
        return this.renderers_[markupLanguage];
    }
    stripMarkup(markupLanguage, markup, options = null) {
        if (!markup)
            return '';
        options = Object.assign({ collapseWhiteSpaces: false }, options);
        let output = markup;
        if (markupLanguage === MarkupToHtml.MARKUP_LANGUAGE_MARKDOWN) {
            if (!this.rawMarkdownIt_) {
                // We enable HTML because we don't want it to be escaped, so
                // that it can be stripped off in the stripHtml call below.
                this.rawMarkdownIt_ = new MarkdownIt({ html: true });
            }
            output = this.rawMarkdownIt_.render(output);
        }
        output = htmlUtils_1.default.stripHtml(output).trim();
        if (options.collapseWhiteSpaces) {
            output = output.replace(/\n+/g, ' ');
            output = output.replace(/\s+/g, ' ');
        }
        return output;
    }
    clearCache(markupLanguage) {
        const r = this.renderer(markupLanguage);
        if (r.clearCache)
            r.clearCache();
    }
    render(markupLanguage, markup, theme, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.options_.isSafeMode) {
                const htmlentities = new html_entities_1.AllHtmlEntities();
                return {
                    html: `<pre>${htmlentities.encode(markup)}</pre>`,
                    cssStrings: [],
                    pluginAssets: [],
                };
            }
            return this.renderer(markupLanguage).render(markup, theme, options);
        });
    }
    allAssets(markupLanguage, theme, noteStyleOptions = null) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.renderer(markupLanguage).allAssets(theme, noteStyleOptions);
        });
    }
}
MarkupToHtml.MARKUP_LANGUAGE_MARKDOWN = MarkupLanguage.Markdown;
MarkupToHtml.MARKUP_LANGUAGE_HTML = MarkupLanguage.Html;
exports.default = MarkupToHtml;
//# sourceMappingURL=MarkupToHtml.js.map